<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Android Studio Gradle Plugin</title><link>https://developer.android.com/studio/releases/gradle-plugin</link><description>Android Studio 构建系统以 Gradle 为基础，并且 Android Gradle 插件添加了几项专用于构建 Android 应用的功能。虽然 Android 插件通常会与 Android Studio 的更新步调保持一致，但插件（以及 Gradle 系统的其余部分）可独立于 Android Studio 运行并单独更新。</description><lastBuildDate>2022-12-04 03:52:29</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>7.3.0（2022 年 9 月）</title><link>https://developer.android.com/studio/releases/gradle-plugin?hl=zh-cn</link><description>
&lt;p&gt;Android Gradle 插件 7.3.0 是一个主要版本，包含各种新功能和改进。&lt;/p&gt;
&lt;h3 data-text="兼容性" id="compatibility-7-3-0"&gt;兼容性&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: right"&gt;&lt;/th&gt;
&lt;th style="text-align: center"&gt;最低版本&lt;/th&gt;
&lt;th style="text-align: center"&gt;默认版本&lt;/th&gt;
&lt;th style="text-align: left"&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: right"&gt;Gradle&lt;/td&gt;
&lt;td style="text-align: center"&gt;7.4&lt;/td&gt;
&lt;td style="text-align: center"&gt;7.4&lt;/td&gt;
&lt;td style="text-align: left"&gt;如需了解详情，请参阅&lt;a href="https://developer.android.com/studio/releases/gradle-plugin?buildsystem=ndk-build&amp;amp;hl=zh-cn#updating-gradle"&gt;更新 Gradle&lt;/a&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: right"&gt;SDK Build Tools&lt;/td&gt;
&lt;td style="text-align: center"&gt;30.0.3&lt;/td&gt;
&lt;td style="text-align: center"&gt;30.0.3&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;a href="https://developer.android.com/studio/intro/update?hl=zh-cn#sdk-manager"&gt;安装&lt;/a&gt;或&lt;a href="https://developer.android.com/studio/releases/build-tools?hl=zh-cn"&gt;配置&lt;/a&gt; SDK Build Tools。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: right"&gt;NDK&lt;/td&gt;
&lt;td style="text-align: center"&gt;不适用&lt;/td&gt;
&lt;td style="text-align: center"&gt;23.1.7779620&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;a href="https://developer.android.com/studio/projects/install-ndk?hl=zh-cn#specific-version"&gt;安装&lt;/a&gt;或&lt;a href="https://developer.android.com/studio/projects/install-ndk?hl=zh-cn#apply-specific-version"&gt;配置&lt;/a&gt;其他版本的 NDK。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: right"&gt;JDK&lt;/td&gt;
&lt;td style="text-align: center"&gt;11&lt;/td&gt;
&lt;td style="text-align: center"&gt;11&lt;/td&gt;
&lt;td style="text-align: left"&gt;如需了解详情，请参阅&lt;a href="https://developer.android.com/studio/intro/studio-config?hl=zh-cn#jdk"&gt;设置 JDK 版本&lt;/a&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 data-text="支持自定义 C/C++ 构建系统" id="cxx-build-systems"&gt;支持自定义 C/C++ 构建系统&lt;/h3&gt;
&lt;p&gt;现在，您可以通过创建一个采用 &lt;a class="external" href="https://ninja-build.org/"&gt;Ninja&lt;/a&gt; build 文件格式写入 build 信息的 Shell 脚本，来创建自定义 C/C++ 构建系统。如需详细了解自定义 C/C++ 构建系统，请参阅&lt;a href="https://developer.android.com/studio/build/cxx-ninja?hl=zh-cn"&gt;使用 Ninja（实验性）集成自定义 C/C++ 构建系统&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="自定义 C/C++ 构建系统的屏幕截图" src="https://developer.android.com/static/studio/images/releases/cxx-ninja.png?hl=zh-cn"/&gt;&lt;/p&gt;
&lt;h3 data-text="最低 Kotlin 插件版本为 1.5.20" id="min-kotlin-version"&gt;最低 Kotlin 插件版本为 1.5.20&lt;/h3&gt;
&lt;p&gt;从 Android Gradle 插件 7.3.0-alpha08 开始，AGP 要求使用 Kotlin 插件版本 1.5.20 或更高版本。为了保持兼容性，请务必在 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中指定 Kotlin 插件版本 1.5.20 或更高版本：&lt;/p&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.20
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-text="已启用生成已归档 APK" id="archived-apk-enabled"&gt;已启用生成已归档 APK&lt;/h3&gt;
&lt;p&gt;从 AGP 7.3 开始，构建的所有 Android App Bundle 都会默认启用&lt;a href="https://android-developers.googleblog.com/2022/03/freeing-up-60-of-storage-for-apps.html"&gt;存储归档&lt;/a&gt;。归档是一项新的 app bundle 功能，今后，如果存储支持此功能，存储空间不足的用户就可以借助此功能有效管理应用空间。&lt;/p&gt;
&lt;p&gt;如需停止生成已归档 APK，请按如下方式修改应用级 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件：&lt;/p&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;android {
  bundle {
    storeArchive {
      enable = false
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-text="已废弃清单文件中的 package 属性" id="package-deprecated"&gt;已废弃清单文件中的 package 属性&lt;/h3&gt;
&lt;p&gt;从 AGP 7.3.0-alpha04 开始，使用 Gradle 构建项目时，如果在清单文件中使用 &lt;code dir="ltr" translate="no"&gt;package&lt;/code&gt; 属性，AGP 会生成警告。如需为应用设置命名空间，请在模块级 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中使用 &lt;code dir="ltr" translate="no"&gt;namespace&lt;/code&gt; 属性。如需了解详情，请参阅&lt;a href="https://developer.android.com/studio/build/configure-app-module?hl=zh-cn#set-namespace"&gt;设置命名空间&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如需获取移至新命名空间 DSL 方面的帮助，请使用 AGP 升级助理 (&lt;strong&gt;Tools &amp;gt; AGP Upgrade Assistant&lt;/strong&gt;)。&lt;/p&gt;
&lt;h3 data-text="Android 平台支持" id="android-platform-support"&gt;Android 平台支持&lt;/h3&gt;
&lt;p&gt;从 AGP 7.3.0-beta05 开始，支持的最低 SDK 版本最高可设为 33（可以使用 &lt;code dir="ltr" translate="no"&gt;minSdk = 33&lt;/code&gt; 来设置）。最低 SDK 表示可运行您的应用的最低 Android 版本，在应用级 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中进行设置。&lt;/p&gt;
</description><author>Google</author><pubDate>2022-09-01 00:00:00</pubDate></item><item><title>7.2.0（2022 年 5 月）</title><link>https://developer.android.com/studio/releases/gradle-plugin?hl=zh-cn</link><description>
&lt;p&gt;Android Gradle 插件 7.2.0 是一个主要版本，包含各种新功能和改进。&lt;/p&gt;
&lt;div class="android-updates-box"&gt;
&lt;b&gt;7.2.2（2022 年 8 月）&lt;/b&gt;
&lt;p&gt;本次要更新对应于 Android Studio Chipmunk 补丁 2，并包含以下 bug 修复：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://issuetracker.google.com/issues/232438924?hl=zh-cn"&gt;问题 232438924&lt;/a&gt;：与 ASM API 一起使用时，AndroidGradlePlugin 版本 7.2 会破坏转换 API&lt;/li&gt;
&lt;li&gt;&lt;a href="https://issuetracker.google.com/issues/231037948?hl=zh-cn"&gt;问题 231037948&lt;/a&gt;：AGP 7.2.0-rc01 :buildSrc:generatePrecompiledScriptPluginAccessors - shadow/bundletool/com/android/prefs/AndroidLocation$AndroidLocationException&lt;/li&gt;
&lt;/ul&gt;
&lt;b&gt;7.2.1（2022 年 5 月）&lt;/b&gt;
&lt;p&gt;
    本次要更新对应于 Android Studio Chipmunk 补丁 1，并包含以下 bug 修复：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://issuetracker.google.com/issues/230361284?hl=zh-cn"&gt;问题 230361284&lt;/a&gt;：bundletool 未正确封装基准配置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
    如需查看此版本中包含的其他 bug 修复，请参阅 &lt;a href="https://developer.android.com/studio/releases?hl=zh-cn#patch-releases"&gt;Android Studio Chipmunk 补丁 1 版本说明&lt;/a&gt;。
  &lt;/p&gt;
&lt;/div&gt;
&lt;h3 data-text="兼容性" id="compatibility-7-2-0"&gt;兼容性&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: right"&gt;&lt;/th&gt;
&lt;th style="text-align: center"&gt;最低版本&lt;/th&gt;
&lt;th style="text-align: center"&gt;默认版本&lt;/th&gt;
&lt;th style="text-align: left"&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: right"&gt;Gradle&lt;/td&gt;
&lt;td style="text-align: center"&gt;7.3.3&lt;/td&gt;
&lt;td style="text-align: center"&gt;7.3.3&lt;/td&gt;
&lt;td style="text-align: left"&gt;如需了解详情，请参阅&lt;a href="https://developer.android.com/studio/releases/gradle-plugin?buildsystem=ndk-build&amp;amp;hl=zh-cn#updating-gradle"&gt;更新 Gradle&lt;/a&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: right"&gt;SDK Build Tools&lt;/td&gt;
&lt;td style="text-align: center"&gt;30.0.3&lt;/td&gt;
&lt;td style="text-align: center"&gt;30.0.3&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;a href="https://developer.android.com/studio/intro/update?hl=zh-cn#sdk-manager"&gt;安装&lt;/a&gt;或&lt;a href="https://developer.android.com/studio/releases/build-tools?hl=zh-cn"&gt;配置&lt;/a&gt; SDK Build Tools。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: right"&gt;NDK&lt;/td&gt;
&lt;td style="text-align: center"&gt;不适用&lt;/td&gt;
&lt;td style="text-align: center"&gt;21.4.7075529&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;a href="https://developer.android.com/studio/projects/install-ndk?hl=zh-cn#specific-version"&gt;安装&lt;/a&gt;或&lt;a href="https://developer.android.com/studio/projects/install-ndk?hl=zh-cn#apply-specific-version"&gt;配置&lt;/a&gt;其他版本的 NDK。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: right"&gt;JDK&lt;/td&gt;
&lt;td style="text-align: center"&gt;11&lt;/td&gt;
&lt;td style="text-align: center"&gt;11&lt;/td&gt;
&lt;td style="text-align: left"&gt;如需了解详情，请参阅&lt;a href="https://developer.android.com/studio/intro/studio-config?hl=zh-cn#jdk"&gt;设置 JDK 版本&lt;/a&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 data-text="Build Analyzer 中的 Jetifier 警告和检查" id="jetifier-build-analyzer"&gt;Build Analyzer 中的 Jetifier 警告和检查&lt;/h3&gt;
&lt;p&gt;现在，如果项目的 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件包含 &lt;code dir="ltr" translate="no"&gt;android.enableJetifier=true&lt;/code&gt;，Build Analyzer 会显示警告。该标志是在之前的 Android Studio 版本中引入的，旨在为不能原生支持 AndroidX 的库启用 AndroidX。不过，库生态系统大多已经变为能够原生支持 AndroidX，因此您的项目可能不再需要 Jetifier 标志了。此外，该标志可能会降低 build 性能。如果您看到此警告，可以在 Build Analyzer 中运行检查，以确认是否可以移除该标志。&lt;/p&gt;
&lt;h3 data-text="支持测试固件" id="test-fixtures"&gt;支持测试固件&lt;/h3&gt;
&lt;p&gt;从 Android Studio Chipmunk Beta 1 开始，Android Studio 支持 Android 和 Java 测试固件。如需详细了解测试固件功能以及如何在 Java 项目中使用该功能，请参阅有关如何&lt;a class="external" href="https://docs.gradle.org/current/userguide/java_testing.html#sec:java_test_fixtures"&gt;使用测试固件&lt;/a&gt;的 Gradle 指南。&lt;/p&gt;
&lt;p&gt;如需在 Android 库模块中启用测试固件，请将以下代码添加到库级 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中：&lt;/p&gt;
&lt;pre class="prettyprint lang-gradle" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;android {
    testFixtures {
        enable true

        // enable testFixtures's android resources (disabled by default)
        // androidResources true
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;默认情况下，如果您发布库，则会同时发布测试固件 AAR 和主库。Gradle 模块元数据文件将包含 Gradle 的信息，以便在请求 &lt;code dir="ltr" translate="no"&gt;testFixtures&lt;/code&gt; 组件时能够使用正确的工件。&lt;/p&gt;
&lt;p&gt;如需停止在发布变体中发布库的测试固件 AAR，请将以下代码添加到库级 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中：&lt;/p&gt;
&lt;pre class="prettyprint lang-gradle" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;afterEvaluate {
    components.release.withVariantsFromConfiguration(
        configurations.releaseTestFixturesVariantReleaseApiPublication) { skip() }
    components.release.withVariantsFromConfiguration(
        configurations.releaseTestFixturesVariantReleaseRuntimePublication) { skip() }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如需使用已发布 Android 库的测试固件 AAR，您可以使用 Gradle 的辅助方法 &lt;code dir="ltr" translate="no"&gt;testFixtures()&lt;/code&gt;。&lt;/p&gt;
&lt;pre class="prettyprint lang-gradle" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;dependencies {
    testImplementation testFixtures('com.example.company:publishedLib:1.0')
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;默认情况下，lint 会分析测试固件来源。您可以对 lint 进行配置，指示其忽略测试固件来源，具体代码如下所示：&lt;/p&gt;
&lt;pre class="prettyprint lang-gradle" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;android {
    lint {
        ignoreTestFixturesSources true
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-text="不支持重复的内容根" id="duplicate-content-roots"&gt;不支持重复的内容根&lt;/h3&gt;
&lt;p&gt;从 AGP 7.2 开始，您无法在多个源代码集之间共享同一个源目录。例如，您不能在单元测试和插桩测试中使用相同的测试源。如需了解详情，请参阅&lt;a href="https://developer.android.com/studio/build/build-variants?hl=zh-cn#configure-sourcesets"&gt;更改默认源代码集配置&lt;/a&gt;。&lt;/p&gt;
</description><author>Google</author><pubDate>2022-05-01 00:00:00</pubDate></item><item><title>7.1.0（2022 年 1 月）</title><link>https://developer.android.com/studio/releases/gradle-plugin?hl=zh-cn</link><description>
&lt;p&gt;Android Gradle 插件 7.1.0 是一个主要版本，包含各种新功能和改进。&lt;/p&gt;
&lt;div&gt;
  &lt;iframe class="devsite-embedded-youtube-video" data-video-id="TBD" data-autohide="1" data-showinfo="0" frameborder="0" allowfullscreen&gt;
  &lt;/iframe&gt;
&lt;/div&gt;
&lt;div class="android-updates-box"&gt;
&lt;p&gt;&lt;b&gt;7.1.3（2022 年 4 月）&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
    本次要更新包含以下 bug 修复：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R8 报告的重复类问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
    如需查看此版本中的完整 bug 修复列表，请参阅 &lt;a href="https://androidstudio.googleblog.com/2022/04/android-studio-bumblebee-202111-patch-3.html"&gt;Android Studio Bumblebee Patch 3 博文&lt;/a&gt;。
  &lt;/p&gt;
&lt;p&gt;&lt;b&gt;7.1.2（2022 年 2 月）&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
    本次要更新包含以下 bug 修复：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android Gradle 插件 7.1.0-rc01 在单元测试期间无法执行 ASM 字节码转换&lt;/li&gt;
&lt;li&gt;Gradle 同步失败，并显示“无法加载类‘com.android.build.api.extension.AndroidComponentsExtension’”消息。&lt;/li&gt;
&lt;li&gt;无法在 Android Gradle 插件 7.0.0 中通过 Groovy DSL 使用部分新的 DSL 代码块&lt;/li&gt;
&lt;li&gt;AGP 7.1 新发布的 API：创建的 javadoc jar 没有签名&lt;/li&gt;
&lt;li&gt;ClassesDataSourceCache 应使用最新的 ASM 版本&lt;/li&gt;
&lt;li&gt;Android Studio BumbleBee 并非总是部署最新的更改&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
    如需查看此版本中的完整 bug 修复列表，请参阅 &lt;a href="https://androidstudio.googleblog.com/2022/02/android-studio-bumblebee-202111-patch-2.html"&gt;Android Studio Bumblebee Patch 2 博文&lt;/a&gt;。
  &lt;/p&gt;
&lt;p&gt;&lt;b&gt;7.1.1（2022 年 2 月）&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
    本次要更新对应于 Android Studio Bumblebee 补丁程序 1 版本。
  &lt;/p&gt;
&lt;p&gt;
    如需查看此版本中的 bug 修复列表，请参阅 &lt;a href="https://androidstudio.googleblog.com/2022/02/android-studio-bumblebee-202111-patch-1.html"&gt;Android Studio Bumblebee Patch 1 博文&lt;/a&gt;。
  &lt;/p&gt;
&lt;/div&gt;
&lt;h3 data-text="兼容性" id="compatibility-7-1-0"&gt;兼容性&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: right"&gt;&lt;/th&gt;
&lt;th style="text-align: center"&gt;最低版本&lt;/th&gt;
&lt;th style="text-align: center"&gt;默认版本&lt;/th&gt;
&lt;th style="text-align: left"&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: right"&gt;Gradle&lt;/td&gt;
&lt;td style="text-align: center"&gt;7.2&lt;/td&gt;
&lt;td style="text-align: center"&gt;7.2&lt;/td&gt;
&lt;td style="text-align: left"&gt;如需了解详情，请参阅&lt;a href="https://developer.android.com/studio/releases/gradle-plugin?buildsystem=ndk-build&amp;amp;hl=zh-cn#updating-gradle"&gt;更新 Gradle&lt;/a&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: right"&gt;SDK Build Tools&lt;/td&gt;
&lt;td style="text-align: center"&gt;30.0.3&lt;/td&gt;
&lt;td style="text-align: center"&gt;30.0.3&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;a href="https://developer.android.com/studio/intro/update?hl=zh-cn#sdk-manager"&gt;安装&lt;/a&gt;或&lt;a href="https://developer.android.com/studio/releases/build-tools?hl=zh-cn"&gt;配置&lt;/a&gt; SDK Build Tools。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: right"&gt;NDK&lt;/td&gt;
&lt;td style="text-align: center"&gt;不适用&lt;/td&gt;
&lt;td style="text-align: center"&gt;21.4.7075529&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;a href="https://developer.android.com/studio/projects/install-ndk?hl=zh-cn#specific-version"&gt;安装&lt;/a&gt;或&lt;a href="https://developer.android.com/studio/projects/install-ndk?hl=zh-cn#apply-specific-version"&gt;配置&lt;/a&gt;其他版本的 NDK。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: right"&gt;JDK&lt;/td&gt;
&lt;td style="text-align: center"&gt;11&lt;/td&gt;
&lt;td style="text-align: center"&gt;11&lt;/td&gt;
&lt;td style="text-align: left"&gt;如需了解详情，请参阅&lt;a href="https://developer.android.com/studio/intro/studio-config?hl=zh-cn#jdk"&gt;设置 JDK 版本&lt;/a&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 data-text="Lint 分析任务现在可缓存" id="lint-cacheable"&gt;Lint 分析任务现在可缓存&lt;/h3&gt;
&lt;p&gt;&lt;code dir="ltr" translate="no"&gt;AndroidLintAnalysisTask&lt;/code&gt; 现在与 &lt;a class="external" href="https://docs.gradle.org/current/userguide/build_cache.html"&gt;Gradle 构建缓存&lt;/a&gt;兼容。如果您通过在 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中设置 &lt;code dir="ltr" translate="no"&gt;org.gradle.caching=true&lt;/code&gt; 来启用构建缓存，lint 分析任务将尽可能从构建缓存中获取其输出。&lt;/p&gt;
&lt;p&gt;使用 Android Gradle 插件运行 lint 时，lint 分析任务通常是最大的瓶颈，因此在许多情况下，启用构建缓存可提高运行 lint 时的构建速度。例如，如果您开发的是多模块项目，并在使用 CI 服务器运行 lint 之前清理了 build 目录，您应该会看到性能得到显著提升。&lt;/p&gt;
&lt;h3 data-text="C/C++ 模块现在可引用同一项目中的其他 C/C++ 模块" id="cpp-references"&gt;C/C++ 模块现在可引用同一项目中的其他 C/C++ 模块&lt;/h3&gt;
&lt;p&gt;现在，包含 C/C++ 代码的 Gradle Android 模块可设置为引用其他 Gradle 模块中的头文件和库代码。&lt;a href="https://google.github.io/prefab/"&gt;Prefab&lt;/a&gt; 协议用于在 Gradle 模块之间传递头文件和库。&lt;/p&gt;
&lt;h4 data-text="要求" id="requirements"&gt;要求&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;/em&gt;使用方模块必须为 &lt;code dir="ltr" translate="no"&gt;CMake&lt;/code&gt;，而非 &lt;code dir="ltr" translate="no"&gt;ndk-build&lt;/code&gt;。对 ndk-build 的支持将需要未来 NDK 更新。&lt;em&gt;&lt;/em&gt;发布方模块可以是 &lt;code dir="ltr" translate="no"&gt;CMake&lt;/code&gt; 或 &lt;code dir="ltr" translate="no"&gt;ndk-build&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;/em&gt;使用方模块必须在 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中启用 &lt;code dir="ltr" translate="no"&gt;prefab&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="prettyprint lang-gradle" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;android {
  buildFeatures {
    prefab true
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;/em&gt;发布方模块必须在 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中启用 &lt;code dir="ltr" translate="no"&gt;prefabPublishing&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="prettyprint lang-gradle" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;android {
  buildFeatures {
    prefabPublishing true
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;/em&gt;使用方模块必须通过在 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件的 &lt;code dir="ltr" translate="no"&gt;dependencies&lt;/code&gt; 代码块中添加一行代码来引用&lt;em&gt;&lt;/em&gt;发布方模块。例如：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="prettyprint lang-gradle" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;dependencies {
  implementation project(':mylibrary')
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;/em&gt;发布方模块必须使用 &lt;code dir="ltr" translate="no"&gt;prefab&lt;/code&gt; 部分公开软件包。例如：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="prettyprint lang-gradle" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;android {
  prefab {
    mylibrary {
      libraryName "libmylibrary"
      headers "src/main/cpp/include"
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;使用方模块的 &lt;code dir="ltr" translate="no"&gt;CMakeLists.txt&lt;/code&gt; 文件可以使用 &lt;code dir="ltr" translate="no"&gt;find_package()&lt;/code&gt; 来查找提供方模块发布的软件包。例如：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="prettyprint lang-gradle" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;find_package(mylibrary REQUIRED CONFIG)
target_link_libraries(
        myapplication
        mylibrary::mylibrary)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.android.com/ndk/guides/cpp-support?hl=zh-cn#one_stl_per_app"&gt;整个应用必须有一个 STL&lt;/a&gt;。例如，使用方模块和发布方模块都可以使用 C++ 共享 STL。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="prettyprint lang-gradle" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;   android {
defaultConfig {
        externalNativeBuild {
          cmake {
            arguments '-DANDROID_STL=c++_shared'
          }
        }
      }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如需详细了解如何使用 AGP 配置原生 AAR 使用方和提供方，请参阅&lt;a href="https://developer.android.com/studio/build/dependencies?amp%3Bagpversion=4.1&amp;amp;%3Bbuildsystem=ndk-build&amp;amp;hl=zh-cn#native-dependencies-with-agp"&gt;原生依赖项与 AGP&lt;/a&gt;。&lt;/p&gt;
&lt;h3 data-text="settings.gradle 文件中的代码库设置" id="settings-gradle"&gt;&lt;code dir="ltr" translate="no"&gt;settings.gradle&lt;/code&gt; 文件中的代码库设置&lt;/h3&gt;
&lt;p&gt;在 Android Studio Bumblebee 中创建新项目时，顶层 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件包含 &lt;code dir="ltr" translate="no"&gt;plugins&lt;/code&gt; 代码块，后跟用于清理构建目录的代码：&lt;/p&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;plugins {
    id 'com.android.application' version '7.1.0-beta02' apply false
    id 'com.android.library' version '7.1.0-beta02' apply false
    id 'org.jetbrains.kotlin.android' version '1.5.30' apply false
}

task clean(type: Delete) {
  delete rootProject.buildDir
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以前位于顶级 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中的代码库设置现在位于 &lt;code dir="ltr" translate="no"&gt;settings.gradle&lt;/code&gt; 文件中：&lt;/p&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;pluginManagement {
  repositories {
    gradlePluginPortal()
    google()
    mavenCentral()
  }
}

dependencyResolutionManagement {
  repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
  repositories {
    google()
    mavenCentral()
  }
}
rootProject.name = 'GradleManagedDeviceTestingNew'
include ':app'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;模块级 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件未更改。因此，请使用顶级 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件和 &lt;code dir="ltr" translate="no"&gt;settings.gradle&lt;/code&gt; 文件定义将应用于项目中所有模块的 build 配置，或定义适用于 Gradle 本身的代码库和依赖项；使用模块级 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件定义特定于项目中的给定模块的 build 配置。&lt;/p&gt;
&lt;h3 data-text="改进了资源缩减器" id="improved-resource-shrinker"&gt;改进了资源缩减器&lt;/h3&gt;
&lt;p&gt;Android Studio Bumblebee 包含一个经过改进的资源缩减器，可以帮助您缩减应用大小。&lt;/p&gt;
&lt;h4 data-text="支持具有动态功能的应用" id="support_for_apps_with_dynamic_features"&gt;支持具有动态功能的应用&lt;/h4&gt;
&lt;p&gt;Android Gradle 插件 7.1.0-alpha09 更新了 Android 资源缩减器的默认实现。新的实现支持缩减具有动态功能的应用。&lt;/p&gt;
&lt;h4 data-text="进一步缩减应用大小实验性功能" id="experimental_further_app_size_reductions"&gt;进一步缩减应用大小实验性功能&lt;/h4&gt;
&lt;p&gt;新的资源缩减器实现可以修改资源表来移除未使用的值资源以及对未使用文件资源的引用，从而进一步缩减应用大小。新的资源缩减器可以完全删除未使用的文件资源，从而进一步缩减应用的大小。默认情况下，此行为尚未启用，但您可以向项目的 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中添加实验性选项 &lt;code dir="ltr" translate="no"&gt;android.experimental.enableNewResourceShrinker.preciseShrinking=true&lt;/code&gt; 来选择启用此行为。&lt;/p&gt;
&lt;p&gt;请报告您使用新资源缩减器或实验性标志时遇到的任何问题。为帮助诊断问题，或者作为临时解决方法，您可以通过将 &lt;code dir="ltr" translate="no"&gt;android.enableNewResourceShrinker=false&lt;/code&gt; 添加到项目的 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 来切换回之前的实现。新的缩减器会将未使用的文件资源替换为与先前的资源缩减器相比略有不同的最小文件，但这不会对运行时产生任何影响。&lt;/p&gt;
&lt;p&gt;我们计划在 Android Gradle 插件 8.0.0 中移除旧实现。&lt;/p&gt;
&lt;h3 data-text="发布 build 变体" id="build-variant-publishing"&gt;发布 build 变体&lt;/h3&gt;
&lt;p&gt;Android Gradle 插件 7.1.0 及更高版本允许您配置要发布到 Apache Maven 代码库的 build 变体。AGP 会根据新的发布 DSL 创建具有一个或多个 build 变体的组件，您可以使用这些组件自定义要发布到 Maven 代码库的内容。与先前版本相比，这样还可以避免不必要的工作，因为默认情况下不会创建任何组件。如需了解详情，请参阅&lt;a href="https://android.googlesource.com/platform/tools/base/+/refs/heads/mirror-goog-studio-main/build-system/gradle-api/src/main/java/com/android/build/api/dsl/Publishing.kt"&gt;发布代码示例&lt;/a&gt;。&lt;/p&gt;
&lt;h3 data-text="发布 Javadoc JAR" id="publish-javadoc-jar"&gt;发布 Javadoc JAR&lt;/h3&gt;
&lt;p&gt;AGP 7.1.0 及更高版本允许您从 Java 和 Kotlin 源代码生成 Javadoc，并为库项目发布 Javadoc JAR 文件和 AAR。Javadoc 已添加到 POM 和 &lt;a class="external" href="https://docs.gradle.org/current/userguide/publishing_gradle_module_metadata.html"&gt;Gradle Module Metadata&lt;/a&gt; 文件中。如需启用此功能，请在 &lt;code dir="ltr" translate="no"&gt;singleVariant&lt;/code&gt; 或 &lt;code dir="ltr" translate="no"&gt;multipleVariants&lt;/code&gt; 发布块中添加 &lt;code dir="ltr" translate="no"&gt;withJavadocJar()&lt;/code&gt;。如需了解详情，请参阅&lt;a href="https://android.googlesource.com/platform/tools/base/+/refs/heads/mirror-goog-studio-main/build-system/gradle-api/src/main/java/com/android/build/api/dsl/PublishingOptions.kt#50"&gt;发布选项代码示例&lt;/a&gt;。&lt;/p&gt;
&lt;h3 data-text="发布源代码 JAR" id="publish-sources-jar"&gt;发布源代码 JAR&lt;/h3&gt;
&lt;p&gt;除了 AAR 之外，AGP 7.1.0 及更高版本还支持为库项目发布 Java 和 Kotlin 源代码 JAR 文件。这些源代码会添加到 POM 和 &lt;a class="external" href="https://docs.gradle.org/current/userguide/publishing_gradle_module_metadata.html"&gt;Gradle Module Metadata&lt;/a&gt; 文件中。如需启用此功能，您可以在 &lt;code dir="ltr" translate="no"&gt;singleVariant&lt;/code&gt; 或 &lt;code dir="ltr" translate="no"&gt;multipleVariants&lt;/code&gt; 发布块中添加 &lt;code dir="ltr" translate="no"&gt;withSourcesJar()&lt;/code&gt;。如需了解详情，请参阅&lt;a href="https://android.googlesource.com/platform/tools/base/+/refs/heads/mirror-goog-studio-main/build-system/gradle-api/src/main/java/com/android/build/api/dsl/PublishingOptions.kt#45"&gt;发布选项代码示例&lt;/a&gt;。&lt;/p&gt;
&lt;h3 data-text="Lint 块语义变更" id="lint-block-semantic-change"&gt;Lint 块语义变更&lt;/h3&gt;
&lt;p&gt;覆盖问题指定严重级别（&lt;code dir="ltr" translate="no"&gt;enable&lt;/code&gt;、&lt;code dir="ltr" translate="no"&gt;disable&lt;/code&gt;/&lt;code dir="ltr" translate="no"&gt;ignore&lt;/code&gt;、&lt;code dir="ltr" translate="no"&gt;informational&lt;/code&gt;、&lt;code dir="ltr" translate="no"&gt;warning&lt;/code&gt;、&lt;code dir="ltr" translate="no"&gt;error&lt;/code&gt;、&lt;code dir="ltr" translate="no"&gt;fatal&lt;/code&gt;）的所有 lint 方法现在遵循配置顺序。例如，在 &lt;a href="https://developer.android.com/reference/tools/gradle-api/7.1/com/android/build/api/extension/AndroidComponentsExtension?hl=zh-cn#finalizedsl"&gt;&lt;code dir="ltr" translate="no"&gt;finalizeDsl()&lt;/code&gt;&lt;/a&gt; 中将某个问题设置为严重问题会覆盖在主 DSL 中停用该问题的行为。如需了解详情，请参阅 &lt;a href="https://developer.android.com/reference/tools/gradle-api/7.1/com/android/build/api/dsl/Lint?hl=zh-cn"&gt;&lt;code dir="ltr" translate="no"&gt;lint{}&lt;/code&gt;&lt;/a&gt; 块参考文档以及 &lt;a href="https://developer.android.com/studio/build/extend-agp?hl=zh-cn#build-flow-extension-points"&gt;Android 构建流程和扩展点&lt;/a&gt;。&lt;/p&gt;
&lt;h3 data-text="Navigation Safe Args 兼容性" id="navigation_safe_args_compatibility"&gt;Navigation Safe Args 兼容性&lt;/h3&gt;
&lt;p&gt;移除了 &lt;a href="https://developer.android.com/guide/navigation/navigation-getting-started?hl=zh-cn#ensure_type-safety_by_using_safe_args"&gt;Navigation Safe Args Gradle 插件&lt;/a&gt;所依赖的 AGP API。AGP 7.1 不适用于 Navigation Safe Args 版本 2.4.0-rc1 或 2.4.0，但支持版本 2.5.0-alpha01 和 2.4.1。在此期间，作为替代解决方案，您可以将 AGP 7.1 与 Navigation Safe Args 的快照 build (Navigation 2.5.0-SNAPSHOT) 搭配使用。如需使用快照 build，请按照&lt;a class="external" href="https://androidx.dev/"&gt;快照说明&lt;/a&gt;操作，其中 build ID 为 8054565。&lt;/p&gt;
&lt;p&gt;此外，Navigation Safe Args 版本 2.4.1 和 2.5.0 将不再适用于 AGP 4.2；要使用这些版本的 Safe Args，您必须使用 AGP 7.0 及更高版本。&lt;/p&gt;
&lt;h3 data-text="停用自动组件创建功能" id="disable-component-creation"&gt;停用自动组件创建功能&lt;/h3&gt;
&lt;p&gt;从 AGP 8.0 开始，默认情况下，系统会停用自动组件创建功能。目前，AGP 7.1 会自动为每个 build 变体创建一个组件，其名称与 build 变体相同，并创建一个包含所有 build 变体的 &lt;code dir="ltr" translate="no"&gt;all&lt;/code&gt; 组件。此自动组件创建功能将被停用。若要过渡到新行为，您应将 &lt;code dir="ltr" translate="no"&gt;android.disableAutomaticComponentCreation&lt;/code&gt; 设置为 &lt;code dir="ltr" translate="no"&gt;true.&lt;/code&gt; 以手动停用自动组件创建功能。如需了解详情，请参阅&lt;a href="https://developer.android.com/studio/build/maven-publish-plugin?hl=zh-cn"&gt;使用 Maven Publish 插件&lt;/a&gt;。&lt;/p&gt;
&lt;h3 data-text="Firebase Performance Monitoring 兼容性" id="upgrade-firebase-compatibility"&gt;Firebase Performance Monitoring 兼容性&lt;/h3&gt;
&lt;p&gt;AGP 7.1 与 Firebase Performance Monitoring Gradle 插件版本 1.4.0 及更低版本不兼容。AGP 升级助理不会自动将插件更新到版本 1.4.1，因此，如果您使用的是 &lt;code dir="ltr" translate="no"&gt;firebase-perf&lt;/code&gt;，并且希望将 AGP 升级到 7.1，则需要手动进行这一升级。&lt;/p&gt;
&lt;h3 data-text="已知问题" id="agp-7-1-stable-known-issues"&gt;已知问题&lt;/h3&gt;
&lt;p&gt;本部分介绍了 Android Gradle 插件 7.1.0 中存在的已知问题。&lt;/p&gt;
&lt;h4 data-text="对使用 Hilt 插件的应用项目进行单元测试时出现问题" id="problems_with_unit_testing_an_app_project_that_uses_the_hilt_plugin"&gt;对使用 Hilt 插件的应用项目进行单元测试时出现问题&lt;/h4&gt;
&lt;p&gt;单元测试类路径包含非插桩应用类，这意味着，运行单元测试时，Hilt 不会插桩应用类来处理依赖项注入。&lt;/p&gt;
&lt;p&gt;此问题将在 7.1.1 版本中得到解决，请参阅&lt;a href="https://issuetracker.google.com/213534628?hl=zh-cn"&gt;问题 213534628&lt;/a&gt;。&lt;/p&gt;
</description><author>Google</author><pubDate>2022-01-01 00:00:00</pubDate></item><item><title>7.0.0（2021 年 7 月）</title><link>https://developer.android.com/studio/releases/gradle-plugin?hl=zh-cn</link><description>
&lt;p&gt;Android Gradle 插件 7.0.0 是一个主要版本，包含各种新功能和改进。&lt;/p&gt;
&lt;div&gt;
  &lt;iframe class="devsite-embedded-youtube-video" data-video-id="TBD" data-autohide="1" data-showinfo="0" frameborder="0" allowfullscreen&gt;
  &lt;/iframe&gt;
&lt;/div&gt;
&lt;div class="android-updates-box"&gt;
&lt;p&gt;&lt;b&gt;7.0.1（2021 年 8 月）&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
    本次要更新包含多项 bug 修复。

    如需查看重要 bug 修复列表，请阅读&lt;a href="https://androidstudio.googleblog.com/2021/08/android-studio-arctic-fox-202031-patch.html"&gt;版本更新博客&lt;/a&gt;上的相关博文。
  &lt;/p&gt;
&lt;/div&gt;
&lt;h3 data-text="兼容性" id="compatibility_4"&gt;兼容性&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: right"&gt;&lt;/th&gt;
&lt;th style="text-align: center"&gt;最低版本&lt;/th&gt;
&lt;th style="text-align: center"&gt;默认版本&lt;/th&gt;
&lt;th style="text-align: left"&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: right"&gt;Gradle&lt;/td&gt;
&lt;td style="text-align: center"&gt;7.0.2&lt;/td&gt;
&lt;td style="text-align: center"&gt;7.0.2&lt;/td&gt;
&lt;td style="text-align: left"&gt;如需了解详情，请参阅&lt;a href="https://developer.android.com/studio/releases/gradle-plugin?buildsystem=ndk-build&amp;amp;hl=zh-cn#updating-gradle"&gt;更新 Gradle&lt;/a&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: right"&gt;SDK Build Tools&lt;/td&gt;
&lt;td style="text-align: center"&gt;30.0.2&lt;/td&gt;
&lt;td style="text-align: center"&gt;30.0.2&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;a href="https://developer.android.com/studio/intro/update?hl=zh-cn#sdk-manager"&gt;安装&lt;/a&gt;或&lt;a href="https://developer.android.com/studio/releases/build-tools?hl=zh-cn"&gt;配置&lt;/a&gt; SDK Build Tools。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: right"&gt;NDK&lt;/td&gt;
&lt;td style="text-align: center"&gt;不适用&lt;/td&gt;
&lt;td style="text-align: center"&gt;21.4.7075529&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;a href="https://developer.android.com/studio/projects/install-ndk?hl=zh-cn#specific-version"&gt;安装&lt;/a&gt;或&lt;a href="https://developer.android.com/studio/projects/install-ndk?hl=zh-cn#apply-specific-version"&gt;配置&lt;/a&gt;其他版本的 NDK。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: right"&gt;JDK&lt;/td&gt;
&lt;td style="text-align: center"&gt;11&lt;/td&gt;
&lt;td style="text-align: center"&gt;11&lt;/td&gt;
&lt;td style="text-align: left"&gt;如需了解详情，请参阅&lt;a href="https://developer.android.com/studio/intro/studio-config?hl=zh-cn#jdk"&gt;设置 JDK 版本&lt;/a&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 data-text="需要 JDK 11 才能运行 AGP 7.0" id="jdk-11"&gt;需要 JDK 11 才能运行 AGP 7.0&lt;/h3&gt;
&lt;p&gt;使用 Android Gradle 插件 7.0 构建应用时，现在需要 JDK 11 才能运行 Gradle。Android Studio Arctic Fox 捆绑了 JDK 11，并将 Gradle 配置为默认使用 JDK 11，这意味着大多数 Android Studio 用户不需要对项目进行任何配置更改。&lt;/p&gt;
&lt;p&gt;如需手动&lt;a href="https://developer.android.com/studio/intro/studio-config?hl=zh-cn#jdk"&gt;设置 JDK 版本&lt;/a&gt;供 Android Studio 中的 AGP 使用，您需要使用 JDK 11 或更高版本。&lt;/p&gt;
&lt;p&gt;如果使用的是独立于 Android Studio 的 AGP，请将 &lt;a class="external" href="https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_environment_variables"&gt;JAVA_HOME 环境变量&lt;/a&gt;或 &lt;code dir="ltr" translate="no"&gt;-Dorg.gradle.java.home&lt;/code&gt; &lt;a class="external" href="https://docs.gradle.org/current/userguide/command_line_interface.html#environment_options"&gt;命令行选项&lt;/a&gt;设置为您的 JDK 11 安装目录，以此升级 JDK 版本。&lt;/p&gt;
&lt;p&gt;请注意，已废弃的 SDK 工具软件包中的 SDK 管理器和 AVD 管理器不适用于 JDK 11。如需继续将 SDK 管理器和 AVD 管理器与 AGP 7.0 及更高版本搭配使用，您需要在当前的 &lt;a href="https://developer.android.com/studio/command-line?hl=zh-cn#tools-sdk"&gt;Android SDK 命令行工具软件包&lt;/a&gt;中切换到工具的最新版本。&lt;/p&gt;
&lt;h3 data-text="Variant API 已稳定" id="variant-api-stable"&gt;Variant API 已稳定&lt;/h3&gt;
&lt;p&gt;新的 Variant API 现已稳定。请参阅 &lt;a href="https://developer.android.com/reference/tools/gradle-api/7.0/com/android/build/api/variant/Variant?hl=zh-cn"&gt;com.android.build.api.variant&lt;/a&gt; 软件包中的新接口以及 &lt;a class="external" href="https://github.com/android/gradle-recipes/tree/agp-7.0"&gt;gradle-recipes&lt;/a&gt; GitHub 项目中的示例。作为新的 Variant API 的一部分，我们通过 &lt;a href="https://developer.android.com/reference/tools/gradle-api/7.0/com/android/build/api/artifact/Artifacts?hl=zh-cn"&gt;Artifacts&lt;/a&gt; 接口提供了许多称为工件的中间文件。这些工件（如合并后的清单）可以使用第三方插件和代码安全地获取与自定义。&lt;/p&gt;
&lt;p&gt;我们会继续扩展 Variant API，为其添加新功能并增加为进行自定义而提供的中间工件数量。&lt;/p&gt;
&lt;h3 data-text="lint 的行为变更" id="lint-behavior-changes"&gt;lint 的行为变更&lt;/h3&gt;
&lt;p&gt;本部分将介绍 Android Gradle 插件 7.0.0 中的多项 lint 行为变更。&lt;/p&gt;
&lt;h4 data-text="针对库依赖项提高了 lint 性能" id="improved_lint_for_library_dependencies"&gt;针对库依赖项提高了 lint 性能&lt;/h4&gt;
&lt;p&gt;现在，在设置了 &lt;code dir="ltr" translate="no"&gt;checkDependencies = true&lt;/code&gt; 的情况下运行 lint 的速度比以往快。如果 Android 项目包含具有库依赖项的应用，建议将 &lt;code dir="ltr" translate="no"&gt;checkDependencies&lt;/code&gt; 设置为 &lt;code dir="ltr" translate="no"&gt;true&lt;/code&gt;（如下所示），并通过 &lt;code dir="ltr" translate="no"&gt;./gradlew :app:lint&lt;/code&gt; 运行 lint，这样就会并行分析所有依赖项模块并且仅生成一份报告，报告中囊括应用及其所有依赖项中存在的问题。&lt;/p&gt;
&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;
// build.gradle

android {
  ...
  lintOptions {
    checkDependencies true
  }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;
// build.gradle.kts

android {
  ...
  lint {
    isCheckDependencies = true
  }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h4 data-text="lint 任务现在可以显示为“UP-TO-DATE”" id="lint_tasks_can_now_be_up-to-date"&gt;lint 任务现在可以显示为“UP-TO-DATE”&lt;/h4&gt;
&lt;p&gt;如果模块的源代码和资源未更改，就无需再次对该模块运行 lint 分析任务。发生这种情况时，任务的执行在 Gradle 输出中显示为“UP-TO-DATE”。进行此更改后，在设置了 &lt;code dir="ltr" translate="no"&gt;checkDependencies = true&lt;/code&gt; 的应用模块上运行 lint 时，只有已更改的模块才需要运行分析。因此，lint 的运行速度更快。&lt;/p&gt;
&lt;p&gt;如果 lint 报告任务的输入未更改，那么该任务同样不需要运行。与此相关的一个&lt;strong&gt;已知问题&lt;/strong&gt;是，lint 任务的状态为“UP-TO-DATE”时无输出到 stdout 的 lint 文本输出（&lt;a href="https://issuetracker.google.com/191897708?hl=zh-cn"&gt;问题 191897708&lt;/a&gt;）。&lt;/p&gt;
&lt;h4 data-text="在动态功能模块上运行 lint" id="running_lint_on_dynamic-feature_modules"&gt;在动态功能模块上运行 lint&lt;/h4&gt;
&lt;p&gt;AGP 不再支持从动态功能模块运行 lint。从相应的应用模块运行 lint 将在其动态功能模块上运行 lint，并将所有问题都包含在应用的 lint 报告中。与此相关的一个&lt;strong&gt;已知问题&lt;/strong&gt;是，在设置了 &lt;code dir="ltr" translate="no"&gt;checkDependencies = true&lt;/code&gt; 的情况下从应用模块运行 lint 时，系统不会检查动态功能库依赖项，除非这些库依赖项同时也是应用依赖项（&lt;a href="https://issuetracker.google.com/191977888?hl=zh-cn"&gt;问题 191977888&lt;/a&gt;）。&lt;/p&gt;
&lt;h4 data-text="仅对默认变体运行 lint" id="running_lint_on_default_variant_only"&gt;仅对默认变体运行 lint&lt;/h4&gt;
&lt;p&gt;运行 &lt;code dir="ltr" translate="no"&gt;./gradlew :app:lint&lt;/code&gt; 时，系统现在仅对默认变体运行 lint。在之前的 AGP 版本中，系统会对所有变体运行 lint。&lt;/p&gt;
&lt;h3 data-text="R8 缩减器中的“缺少类”警告" id="r8-missing-class-warning"&gt;R8 缩减器中的“缺少类”警告&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://developer.android.com/studio/build/shrink-code?hl=zh-cn"&gt;R8&lt;/a&gt; 能够更精确、更一致地处理缺少的类和 &lt;code dir="ltr" translate="no"&gt;-dontwarn&lt;/code&gt; 选项。因此，您应该开始评估 R8 发出的“缺少类”警告。&lt;/p&gt;
&lt;p&gt;当 R8 遇到未在您的应用或其任一依赖项中定义的类引用时，会发出一条警告，该警告将显示在您的 build 输出中。例如：&lt;/p&gt;
&lt;pre class="devsite-click-to-copy" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;R8: Missing class: java.lang.instrument.ClassFileTransformer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这条警告表示，在分析应用的代码时，找不到类定义 &lt;code dir="ltr" translate="no"&gt;java.lang.instrument.ClassFileTransformer&lt;/code&gt;。虽然该警告通常意味着出现了错误，但也有可能您需要忽略该警告。忽略该警告的两个常见原因如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;以 JVM 和缺少的类为目标的库属于 JVM 库类型（如上例所示）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;您的其中一个依赖项使用了仅限编译时使用的 API。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;您可以通过向 &lt;code dir="ltr" translate="no"&gt;proguard-rules.pro&lt;/code&gt; 文件添加 &lt;code dir="ltr" translate="no"&gt;-dontwarn&lt;/code&gt; 规则来忽略“缺少类”警告。例如：&lt;/p&gt;
&lt;pre class="devsite-click-to-copy" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;-dontwarn java.lang.instrument.ClassFileTransformer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为方便起见，AGP 将生成一个文件，包含所有可能缺少的规则，并将其写入一个文件路径，例如以下文件路径：&lt;code dir="ltr" translate="no"&gt;app/build/outputs/mapping/release/missing_rules.txt&lt;/code&gt;。将这些规则添加到 &lt;code dir="ltr" translate="no"&gt;proguard-rules.pro&lt;/code&gt; 文件中即可忽略警告。&lt;/p&gt;
&lt;p&gt;在 AGP 7.0 中，“缺少类”消息将显示为警告，通过在 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 中设置 &lt;code dir="ltr" translate="no"&gt;android.r8.failOnMissingClasses = true&lt;/code&gt; 可将其转换为错误。在 AGP 8.0 中，这些警告将变成破坏 build 的错误。将 &lt;code dir="ltr" translate="no"&gt;-ignorewarnings&lt;/code&gt; 选项添加到 &lt;code dir="ltr" translate="no"&gt;proguard-rules.pro&lt;/code&gt; 文件中可以保留 AGP 7.0 的行为，但建议不要这样做。&lt;/p&gt;
&lt;h3 data-text="移除了 Android Gradle 插件构建缓存" id="build-cache-removed"&gt;移除了 Android Gradle 插件构建缓存&lt;/h3&gt;
&lt;p&gt;AGP 构建缓存已在 AGP 4.1 中移除。AGP 构建缓存之前在 AGP 2.3 中引入，对 Gradle 构建缓存起到了补充的作用；在 AGP 4.1 中，AGP 构建缓存已完全被 Gradle 构建缓存所取代。此更改不会影响到构建时间。&lt;/p&gt;
&lt;p&gt;在 AGP 7.0 中，移除了 &lt;code dir="ltr" translate="no"&gt;android.enableBuildCache&lt;/code&gt; 属性、&lt;code dir="ltr" translate="no"&gt;android.buildCacheDir&lt;/code&gt; 属性和 &lt;code dir="ltr" translate="no"&gt;cleanBuildCache&lt;/code&gt; 任务。&lt;/p&gt;
&lt;h3 data-text="在项目中使用 Java 11 源代码" id="java-11"&gt;在项目中使用 Java 11 源代码&lt;/h3&gt;
&lt;p&gt;现在，您最高可以在应用的项目中编译 Java 11 版本的源代码，这让您可以使用更新的语言功能，例如专用接口方法、匿名类的 diamond 运算符以及 lambda 参数的局部变量语法。&lt;/p&gt;
&lt;p&gt;如需启用此功能，请将 &lt;code dir="ltr" translate="no"&gt;compileOptions&lt;/code&gt; 设置为所需的 Java 版本，并将 &lt;code dir="ltr" translate="no"&gt;compileSdkVersion&lt;/code&gt; 设置为 30 或更高：&lt;/p&gt;
&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;
// build.gradle

android {
    compileSdkVersion 30

    compileOptions {
      sourceCompatibility JavaVersion.VERSION_11
      targetCompatibility JavaVersion.VERSION_11
    }

    // For Kotlin projects
    kotlinOptions {
      jvmTarget = "11"
    }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;
// build.gradle.kts

android {
    compileSdkVersion(30)

    compileOptions {
      sourceCompatibility(JavaVersion.VERSION_11)
      targetCompatibility(JavaVersion.VERSION_11)
    }

    kotlinOptions {
      jvmTarget = "11"
    }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3 data-text="移除了依赖项配置" id="dependency-configurations-removed"&gt;移除了依赖项配置&lt;/h3&gt;
&lt;p&gt;在 AGP 7.0 中，移除了以下配置（或依赖项范围）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code dir="ltr" translate="no"&gt;compile&lt;/code&gt;&lt;br/&gt;
根据用例，该配置已被 &lt;a href="https://developer.android.com/studio/build/dependencies?hl=zh-cn#api"&gt;&lt;code dir="ltr" translate="no"&gt;api&lt;/code&gt;&lt;/a&gt; 或 &lt;a href="https://developer.android.com/studio/build/dependencies?hl=zh-cn#implementation"&gt;&lt;code dir="ltr" translate="no"&gt;implementation&lt;/code&gt;&lt;/a&gt; 替换。&lt;br/&gt;
同样适用于 *Compile 变体，例如 &lt;code dir="ltr" translate="no"&gt;debugCompile&lt;/code&gt;。&lt;em&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code dir="ltr" translate="no"&gt;provided&lt;/code&gt;&lt;br/&gt;
该配置已被 &lt;a href="https://developer.android.com/studio/build/dependencies?hl=zh-cn#compileOnly"&gt;&lt;code dir="ltr" translate="no"&gt;compileOnly&lt;/code&gt;&lt;/a&gt; 替换。&lt;br/&gt;
同样适用于 *Provided 变体，例如 &lt;code dir="ltr" translate="no"&gt;releaseProvided&lt;/code&gt;。&lt;em&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code dir="ltr" translate="no"&gt;apk&lt;/code&gt;&lt;br/&gt;
该配置已被 &lt;a href="https://developer.android.com/studio/build/dependencies?hl=zh-cn#runtimeOnly"&gt;&lt;code dir="ltr" translate="no"&gt;runtimeOnly&lt;/code&gt;&lt;/a&gt; 替换。&lt;/li&gt;
&lt;li&gt;&lt;code dir="ltr" translate="no"&gt;publish&lt;/code&gt;&lt;br/&gt;
该配置已被 &lt;a href="https://developer.android.com/studio/build/dependencies?hl=zh-cn#runtimeOnly"&gt;&lt;code dir="ltr" translate="no"&gt;runtimeOnly&lt;/code&gt;&lt;/a&gt; 替换。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在大多数情况下，&lt;a href="https://developer.android.com/studio/releases?hl=zh-cn#agp-upgrade-assistant"&gt;AGP 升级助理&lt;/a&gt;会自动将您的项目迁移到新配置。&lt;/p&gt;
&lt;h3 data-text="针对 Android Gradle 插件进行编译时的类路径更改" id="classpath-change"&gt;针对 Android Gradle 插件进行编译时的类路径更改&lt;/h3&gt;
&lt;p&gt;如果要针对 Android Gradle 插件进行编译，编译类路径可能会更改。由于 AGP 现在是在内部使用 &lt;code dir="ltr" translate="no"&gt;api/implementation&lt;/code&gt; 配置，因此某些工件可能会从您的编译类路径中移除。如果您在编译时依赖 AGP 依赖项，请务必将其添加为显式依赖项。&lt;/p&gt;
&lt;h3 data-text="不支持在 Java 资源文件夹中添加原生库" id="no-jnlibs-res-folder"&gt;不支持在 Java 资源文件夹中添加原生库&lt;/h3&gt;
&lt;p&gt;以前，您可以在某个 Java 资源文件夹中添加原生库，并使用 &lt;code dir="ltr" translate="no"&gt;android.sourceSets.main.resources.srcDirs&lt;/code&gt; 注册该文件夹，以便提取该原生库并将其添加到最终 APK 中。从 AGP 7.0 开始，此功能不受支持，Java 资源文件夹中的原生库将被忽略。请改为使用专为处理原生库而设计的 DSL 方法 &lt;code dir="ltr" translate="no"&gt;android.sourceSets.main.jniLibs.srcDirs&lt;/code&gt;。如需了解详情，请参阅&lt;a href="https://developer.android.com/studio/build/build-variants?hl=zh-cn#configure-sourcesets"&gt;如何配置源代码集&lt;/a&gt;。&lt;/p&gt;
&lt;h3 data-text="已知问题" id="agp-7-stable-known-issues"&gt;已知问题&lt;/h3&gt;
&lt;p&gt;本部分将介绍 Android Gradle 插件 7.0.0 中存在的已知问题。&lt;/p&gt;
&lt;h4 data-text="与 1.4.x Kotlin 多平台插件不兼容" id="incompatibility_with_14x_kotlin_multiplatform_plugin"&gt;与 1.4.x Kotlin 多平台插件不兼容&lt;/h4&gt;
&lt;p&gt;Android Gradle 插件 7.0.0 与 &lt;a href="https://developer.android.com/studio/releases/(https:/plugins.jetbrains.com/plugin/14936-kotlin-multiplatform-mobile/versions/dev)%7B:.external%7D?hl=zh-cn"&gt;Kotlin 多平台插件&lt;/a&gt; 1.5.0 及更高版本兼容。使用 Kotlin 多平台支持的项目需要更新到 Kotlin 1.5.0 才能使用 Android Gradle 插件 7.0.0。解决方法之一是，您可以将 Android Gradle 插件降级到 4.2.x，不过建议不要这样做。&lt;/p&gt;
&lt;p&gt;如需了解详情，请参阅 &lt;a class="external" href="https://youtrack.jetbrains.com/issue/KT-43944"&gt;KT-43944&lt;/a&gt;。&lt;/p&gt;
&lt;h4 data-text="缺少 lint 输出" id="missing_lint_output"&gt;缺少 lint 输出&lt;/h4&gt;
&lt;p&gt;lint 任务的状态为“UP-TO-DATE”时无输出到 stdout 的 lint 文本输出（&lt;a href="https://issuetracker.google.com/191897708?hl=zh-cn"&gt;问题 191897708&lt;/a&gt;）。如需了解更多背景信息，请参阅 &lt;a href="#lint-behavior-changes"&gt;lint 的行为变更&lt;/a&gt;。此问题将在 Android Gradle 插件 7.1 中得到解决。&lt;/p&gt;
&lt;h4 data-text="系统不会对所有动态功能库依赖项进行 lint 检查" id="not_all_dynamic-feature_library_dependencies_are_lint_checked"&gt;系统不会对所有动态功能库依赖项进行 lint 检查&lt;/h4&gt;
&lt;p&gt;在设置了 &lt;code dir="ltr" translate="no"&gt;checkDependencies = true&lt;/code&gt; 的情况下从应用模块运行 lint 时，系统不会检查动态功能库依赖项，除非这些库依赖项同时也是应用依赖项（&lt;a href="https://issuetracker.google.com/191977888?hl=zh-cn"&gt;问题 191977888&lt;/a&gt;）。解决方法之一是，您可以在这些库上运行 lint 任务。如需了解更多背景信息，请参阅 &lt;a href="#lint-behavior-changes"&gt;lint 的行为变更&lt;/a&gt;。&lt;/p&gt;
</description><author>Google</author><pubDate>2021-07-01 00:00:00</pubDate></item><item><title>4.2.0（2021 年 3 月）</title><link>https://developer.android.com/studio/releases/gradle-plugin?hl=zh-cn</link><description>
&lt;h3 data-text="兼容性" id="compatibility_5"&gt;兼容性&lt;/h3&gt;
&lt;table class="blue" style="max-width:700px;"&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;th&gt; 
    &lt;/th&gt;
&lt;th style="font-size:medium;text-align:center;"&gt;最低版本
    &lt;/th&gt;
&lt;th style="font-size:medium;text-align:center;"&gt;默认版本
    &lt;/th&gt;
&lt;th style="font-size:medium;text-align:center;"&gt;备注
    &lt;/th&gt;
&lt;/tr&gt;
&lt;tr class="alt"&gt;
&lt;td style="font-size:medium;text-align:right;min-width:150px;padding:12px;"&gt;&lt;b&gt;Gradle&lt;/b&gt;
&lt;/td&gt;
&lt;td style="font-size:medium;text-align:center;padding:12px;"&gt;&lt;a href="https://docs.gradle.org/6.7.1/release-notes.html"&gt;6.7.1&lt;/a&gt;
&lt;/td&gt;
&lt;td style="font-size:medium;text-align:center;padding:12px;"&gt;不适用
    &lt;/td&gt;
&lt;td style="font-size:medium;padding:12px;"&gt;如需了解详情，请参阅&lt;a href="#updating-gradle"&gt;更新 Gradle&lt;/a&gt;。
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=""&gt;
&lt;td style="font-size:medium;text-align:right;padding:12px;"&gt;&lt;b&gt;SDK Build Tools&lt;/b&gt;
&lt;/td&gt;
&lt;td style="font-size:medium;text-align:center;padding:12px;"&gt;&lt;a href="https://developer.android.com/studio/releases/build-tools?hl=zh-cn#notes"&gt;30.0.2&lt;/a&gt;
&lt;/td&gt;
&lt;td style="font-size:medium;text-align:center;padding:12px;"&gt;&lt;a href="https://developer.android.com/studio/releases/build-tools?hl=zh-cn#notes"&gt;30.0.2&lt;/a&gt;
&lt;/td&gt;
&lt;td style="font-size:medium;padding:12px;"&gt;&lt;a href="https://developer.android.com/studio/intro/update?hl=zh-cn#sdk-manager"&gt;安装&lt;/a&gt;或&lt;a href="https://developer.android.com/studio/releases/build-tools?hl=zh-cn"&gt;配置&lt;/a&gt; SDK Build Tools。
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="alt"&gt;
&lt;td style="text-align:right;font-size:medium;padding:12px;"&gt;&lt;b&gt;NDK&lt;/b&gt;
&lt;/td&gt;
&lt;td style="text-align:center;font-size:medium;padding:12px;"&gt;不适用
    &lt;/td&gt;
&lt;td style="text-align:center;font-size:medium;padding:12px;"&gt;21.4.7075529
    &lt;/td&gt;
&lt;td style="font-size:medium;padding:12px;"&gt;&lt;a href="https://developer.android.com/studio/projects/install-ndk?hl=zh-cn#specific-version"&gt;安装&lt;/a&gt;或&lt;a href="https://developer.android.com/studio/projects/install-ndk?hl=zh-cn#apply-specific-version"&gt;配置&lt;/a&gt;其他版本的 NDK。
    &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3 data-text="新功能" id="4-2-0-new"&gt;新功能&lt;/h3&gt;
&lt;p&gt;此版本的 Android Gradle 插件包含以下新功能。&lt;/p&gt;
&lt;h4 data-text="默认情况下使用 Java 语言版本 8" id="java-8-default"&gt;默认情况下使用 Java 语言版本 8&lt;/h4&gt;
&lt;p&gt;从 4.2 版本开始，AGP 将默认使用 Java 8 语言级别。Java 8 提供对一些更新语言功能（包括 lambda 表达式、方法引用和静态接口方法）的访问权限。如需查看受支持功能的完整列表，请参阅 &lt;a href="https://developer.android.com/studio/write/java8-support?hl=zh-cn#supported_features"&gt;Java 8 文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如需保留旧行为，请在模块级 &lt;code dir="ltr" translate="no"&gt;build.gradle.kts&lt;/code&gt; 或 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中显式指定 Java 7：&lt;/p&gt;
&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;
// build.gradle

android {
  ...
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }
  // For Kotlin projects, compile to Java 6 instead of 7
  kotlinOptions {
    jvmTarget = "1.6"
  }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;
// build.gradle.kts

android {
  ...
  compileOptions {
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7
  }
  // For Kotlin projects, compile to Java 6 instead of 7
  kotlinOptions {
    jvmTarget = "1.6"
  }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h4 data-text="新增的 JVM 资源编译器" id="resource-compiler"&gt;新增的 JVM 资源编译器&lt;/h4&gt;
&lt;p&gt;Android Gradle 插件 4.2 工具中新增了一个 JVM 资源编译器，它取代了 &lt;a href="https://developer.android.com/studio/command-line/aapt2?hl=zh-cn"&gt;AAPT2 资源编译器&lt;/a&gt;的部分功能，有助于提升构建性能，尤其是在 Windows 计算机上。新增的 JVM 资源编译器默认处于启用状态。&lt;/p&gt;
&lt;h4 data-text="现在支持 v3 和 v4 签名" id="v3-v4-signing"&gt;现在支持 v3 和 v4 签名&lt;/h4&gt;
&lt;p&gt;Android Gradle 插件 4.2 现在支持 &lt;a href="https://source.android.com/security/apksigning/v3?hl=zh-cn"&gt;APK v3&lt;/a&gt; 和 &lt;a href="https://source.android.com/security/apksigning/v4?hl=zh-cn"&gt;APK v4&lt;/a&gt; 签名格式。
如需在 build 中启用这两种格式之一或同时启用这两种格式，请将以下属性添加到模块级 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 或 &lt;code dir="ltr" translate="no"&gt;build.gradle.kts&lt;/code&gt; 文件中：&lt;/p&gt;
&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;
// build.gradle

android {
  ...
  signingConfigs {
    config {
        ...
        enableV3Signing true
        enableV4Signing true
    }
  }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;
// build.gradle.kts

android {
   ...
   signingConfigs {
      config {
          ...
          enableV3Signing = true
          enableV4Signing = true
      }
   }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;通过 APK v4 签名，您可以使用 Android 11 中的 &lt;a href="https://developer.android.com/about/versions/11/features?hl=zh-cn#incremental"&gt;ADB 增量 APK 安装&lt;/a&gt;快速部署大型 APK。此新标志负责部署过程中的 APK 签名步骤。&lt;/p&gt;
&lt;h4 data-text="按变体配置应用签名" id="app-signing-per-variant"&gt;按变体配置应用签名&lt;/h4&gt;
&lt;p&gt;现在可以按变体在 Android Gradle 插件中&lt;a href="https://developer.android.com/reference/tools/gradle-api/4.2/com/android/build/api/variant/SigningConfig?hl=zh-cn#summary"&gt;启用或停用应用签名&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;以下示例展示了如何在 Kotlin 或 Groovy 中使用 &lt;a href="https://developer.android.com/reference/tools/gradle-api/4.2/com/android/build/api/extension/AndroidComponentsExtension?hl=zh-cn#onvariants"&gt;&lt;code dir="ltr" translate="no"&gt;onVariants()&lt;/code&gt;&lt;/a&gt; 方法按变体设置应用签名：&lt;/p&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;androidComponents {
    onVariants(selector().withName("fooDebug"), {
        signingConfig.enableV1Signing.set(false)
        signingConfig.enableV2Signing.set(true)
    })
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-text="新增的 Gradle 属性：android.native.buildOutput" id="native-build-output"&gt;新增的 Gradle 属性：&lt;code dir="ltr" translate="no"&gt;android.native.buildOutput&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;为了减少构建输出中的杂乱现象，AGP 4.2 会过滤来自使用 &lt;a href="https://developer.android.com/ndk/guides/cmake?hl=zh-cn"&gt;CMake&lt;/a&gt; 和 &lt;a href="https://developer.android.com/ndk/guides/ndk-build?hl=zh-cn"&gt;&lt;code dir="ltr" translate="no"&gt;ndk-build&lt;/code&gt;&lt;/a&gt; 的原生 build 的消息，从而在默认情况下仅显示 C/C++ 编译器输出。以前，系统会为构建的每个文件生成一行输出，导致生成大量信息性消息。&lt;/p&gt;
&lt;p&gt;如果您想查看完整的原生输出，请将新的 Gradle 属性 &lt;code dir="ltr" translate="no"&gt;android.native.buildOutput&lt;/code&gt; 设置为 &lt;code dir="ltr" translate="no"&gt;verbose&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;您可以在 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中或通过命令行设置此属性。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;gradle.properties&lt;/em&gt; &lt;br/&gt;
&lt;code dir="ltr" translate="no"&gt;android.native.buildOutput=verbose&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;命令行&lt;/em&gt; &lt;br/&gt;
&lt;code dir="ltr" translate="no"&gt;-Pandroid.native.buildOutput=verbose&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此属性的默认值为 &lt;code dir="ltr" translate="no"&gt;quiet&lt;/code&gt;。&lt;/p&gt;
&lt;h3 data-text="gradle.properties 文件的行为变更" id="4.2-gradle-properties"&gt;gradle.properties 文件的行为变更&lt;/h3&gt;
&lt;p&gt;从 AGP 4.2 开始，无法再从子项目中替换 Gradle 属性。也就是说，如果您在子项目（而不是根项目）上的 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中声明某个属性，该属性将被忽略。&lt;/p&gt;
&lt;p&gt;例如，在以前的版本中，AGP 会从 &lt;code dir="ltr" translate="no"&gt;&lt;var translate="no"&gt;projectDir&lt;/var&gt;/gradle.properties&lt;/code&gt;、&lt;code dir="ltr" translate="no"&gt;&lt;var translate="no"&gt;projectDir&lt;/var&gt;/app/gradle.properties&lt;/code&gt;、&lt;code dir="ltr" translate="no"&gt;&lt;var translate="no"&gt;projectDir&lt;/var&gt;/library/gradle.properties&lt;/code&gt; 等文件中读取值。对于应用模块，如果同一 Gradle 属性同时存在于 &lt;code dir="ltr" translate="no"&gt;&lt;var translate="no"&gt;projectDir&lt;/var&gt;/gradle.properties&lt;/code&gt; 和 &lt;code dir="ltr" translate="no"&gt;&lt;var translate="no"&gt;projectDir&lt;/var&gt;/app/gradle.properties&lt;/code&gt; 中，&lt;code dir="ltr" translate="no"&gt;&lt;var translate="no"&gt;projectDir&lt;/var&gt;/app/gradle.properties&lt;/code&gt; 中的值优先。&lt;/p&gt;
&lt;p&gt;在 AGP 4.2 中已更改此行为，AGP 不会从子项目内的 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 中加载值（例如，子项目为&lt;code dir="ltr" translate="no"&gt;&lt;var translate="no"&gt;projectDir&lt;/var&gt;/app/gradle.properties&lt;/code&gt;）。此更改反映了&lt;a class="external" href="https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_configuration_properties"&gt;新的 Gradle 行为&lt;/a&gt;并支持&lt;a class="external" href="https://medium.com/androiddevelopers/configuration-caching-deep-dive-bcb304698070"&gt;配置缓存&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如需详细了解如何在 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中设置值，请参阅 &lt;a class="external" href="https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_configuration_properties"&gt;Gradle 文档&lt;/a&gt;。&lt;/p&gt;
&lt;h3 data-text="Gradle 兼容性和配置变更" id="4.2-bundled-jdk-11"&gt;Gradle 兼容性和配置变更&lt;/h3&gt;
&lt;p&gt;在 Android Studio 中运行时，Gradle 构建工具会使用 Studio 所捆绑的 JDK。在之前的版本中，与 Studio 捆绑的是 JDK 8。但在 4.2 中，现在捆绑的版本为 JDK 11。使用捆绑的新 JDK 运行 Gradle 时，由于对垃圾回收器的变更，这可能会导致某些不兼容问题或影响 JVM 性能。这些问题的说明如下。&lt;/p&gt;
&lt;div class="note"&gt;
&lt;p&gt;&lt;b&gt;注意&lt;/b&gt;：虽然我们建议使用 JDK 11 运行 Gradle，但您也可以在&lt;a href="https://developer.android.com/studio/projects?hl=zh-cn#ProjectStructure"&gt;&lt;b&gt;项目结构&lt;/b&gt;&lt;/a&gt;对话框中更改用于运行 Gradle 的 JDK。更改此设置只会更改用于运行 Gradle 的 JDK，而不会改变用于运行 Studio 自身的 JDK。
&lt;/p&gt;
&lt;/div&gt;
&lt;h4 data-text="Studio 与 Android Gradle 插件 (AGP) 的兼容性" id="studio-4.2-gradle-compatibility"&gt;Studio 与 Android Gradle 插件 (AGP) 的兼容性&lt;/h4&gt;
&lt;p&gt;Android Studio 4.2 可以打开使用 AGP 3.1 及更高版本的项目，前提是 AGP 运行的是 Gradle 4.8.1 及更高版本。如需详细了解 Gradle 兼容性，请参阅&lt;a href="#updating-gradle"&gt;更新 Gradle&lt;/a&gt;。&lt;/p&gt;
&lt;h4 data-text="针对 JDK 11 优化 Gradle 构建" id="optimize-gc-jdk-11"&gt;针对 JDK 11 优化 Gradle 构建&lt;/h4&gt;
&lt;p&gt;JDK 11 的这项更新会影响 JVM 垃圾回收器的默认配置，因为 JDK 8 使用并行垃圾回收器，而 JDK 11 使用 &lt;a class="external" href="https://docs.oracle.com/javase/9/gctuning/garbage-first-garbage-collector.htm#JSGCT-GUID-ED3AB6D3-FD9B-4447-9EDF-983ED2F7A573"&gt;G1 垃圾回收器&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;为提高构建性能，我们建议您使用并行垃圾回收器&lt;a href="https://developer.android.com/studio/build/profile-your-build?hl=zh-cn"&gt;测试 Gradle build&lt;/a&gt;。在 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 中设置以下内容：&lt;/p&gt;
&lt;pre class="devsite-click-to-copy" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;org.gradle.jvmargs=-XX:+UseParallelGC
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果此字段中已设置了其他选项，请添加一个新选项：&lt;/p&gt;
&lt;pre class="devsite-click-to-copy" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;org.gradle.jvmargs=-Xmx1536m -XX:+UseParallelGC
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如需使用不同的配置检测构建速度，请参阅&lt;a href="https://developer.android.com/studio/build/profile-your-build?hl=zh-cn"&gt;分析 build 性能&lt;/a&gt;。&lt;/p&gt;
&lt;h3 data-text="当 minSdk 为 28 或更高级别时，系统会在 APK 中解压缩 DEX 文件" id="dex_files_uncompressed_in_apks_when_minsdk_28_or_higher"&gt;当 &lt;code dir="ltr" translate="no"&gt;minSdk&lt;/code&gt; 为 28 或更高级别时，系统会在 APK 中解压缩 DEX 文件&lt;/h3&gt;
&lt;p&gt;现在，当 &lt;code dir="ltr" translate="no"&gt;minSdk&lt;/code&gt; 为 28 或更高级别时，AGP 默认在 APK 中打包未压缩的 DEX 文件。这会导致 APK 大小增大，但会使设备上的安装大小变小，并且下载大小大致相同。&lt;/p&gt;
&lt;p&gt;如需强制 AGP 改为打包压缩后的 DEX 文件，您可以将以下这段代码添加到 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中：&lt;/p&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;android {
    packagingOptions {
        dex {
            useLegacyPackaging true
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-text="使用 DSL 打包压缩后的原生库" id="compress-native-libs-dsl"&gt;使用 DSL 打包压缩后的原生库&lt;/h3&gt;
&lt;p&gt;我们建议以未压缩的形式打包原生库，因为这会减小应用安装大小，缩减应用下载大小，并缩短用户的应用加载时间。不过，如果您希望 Android Gradle 插件在构建应用时打包压缩后的原生库，请在应用的 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中将 &lt;a href="https://developer.android.com/reference/tools/gradle-api/7.1/com/android/build/api/dsl/JniLibsPackagingOptions?hl=zh-cn#uselegacypackaging"&gt;&lt;code dir="ltr" translate="no"&gt;useLegacyPackaging&lt;/code&gt;&lt;/a&gt; 设置为 &lt;code dir="ltr" translate="no"&gt;true&lt;/code&gt;：&lt;/p&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;android {
    packagingOptions {
        jniLibs {
            useLegacyPackaging true
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code dir="ltr" translate="no"&gt;useLegacyPackaging&lt;/code&gt; 标记会替换 &lt;code dir="ltr" translate="no"&gt;extractNativeLibs&lt;/code&gt; 清单属性。如需了解更多背景信息，请参阅版本说明&lt;a href="#extractNativeLibs"&gt;默认情况下，原生库以未压缩的形式打包&lt;/a&gt;。&lt;/p&gt;
</description><author>Google</author><pubDate>2021-03-01 00:00:00</pubDate></item><item><title>4.1.0（2020 年 8 月）</title><link>https://developer.android.com/studio/releases/gradle-plugin?hl=zh-cn</link><description>
&lt;h3 data-text="兼容性" id="compatibility_6"&gt;兼容性&lt;/h3&gt;
&lt;table class="blue" style="max-width:700px;"&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;th&gt; 
    &lt;/th&gt;
&lt;th style="font-size:medium;text-align:center;"&gt;最低版本
    &lt;/th&gt;
&lt;th style="font-size:medium;text-align:center;"&gt;默认版本
    &lt;/th&gt;
&lt;th style="font-size:medium;text-align:center;"&gt;备注
    &lt;/th&gt;
&lt;/tr&gt;
&lt;tr class="alt"&gt;
&lt;td style="font-size:medium;text-align:right;min-width:150px;padding:12px;"&gt;&lt;b&gt;Gradle&lt;/b&gt;
&lt;/td&gt;
&lt;td style="font-size:medium;text-align:center;padding:12px;"&gt;&lt;a href="https://docs.gradle.org/6.5.1/release-notes.html"&gt;6.5&lt;/a&gt;
&lt;/td&gt;
&lt;td style="font-size:medium;text-align:center;padding:12px;"&gt;不适用
    &lt;/td&gt;
&lt;td style="font-size:medium;padding:12px;"&gt;如需了解详情，请参阅&lt;a href="#updating-gradle"&gt;更新 Gradle&lt;/a&gt;。
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=""&gt;
&lt;td style="font-size:medium;text-align:right;padding:12px;"&gt;&lt;b&gt;SDK Build Tools&lt;/b&gt;
&lt;/td&gt;
&lt;td style="font-size:medium;text-align:center;padding:12px;"&gt;&lt;a href="https://developer.android.com/studio/releases/build-tools?hl=zh-cn#notes"&gt;29.0.2&lt;/a&gt;
&lt;/td&gt;
&lt;td style="font-size:medium;text-align:center;padding:12px;"&gt;&lt;a href="https://developer.android.com/studio/releases/build-tools?hl=zh-cn#notes"&gt;29.0.2&lt;/a&gt;
&lt;/td&gt;
&lt;td style="font-size:medium;padding:12px;"&gt;&lt;a href="https://developer.android.com/studio/intro/update?hl=zh-cn#sdk-manager"&gt;安装&lt;/a&gt;或&lt;a href="https://developer.android.com/studio/releases/build-tools?hl=zh-cn"&gt;配置&lt;/a&gt; SDK Build Tools。
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="alt"&gt;
&lt;td style="text-align:right;font-size:medium;padding:12px;"&gt;&lt;b&gt;NDK&lt;/b&gt;
&lt;/td&gt;
&lt;td style="text-align:center;font-size:medium;padding:12px;"&gt;不适用
    &lt;/td&gt;
&lt;td style="text-align:center;font-size:medium;padding:12px;"&gt;21.1.6352462
    &lt;/td&gt;
&lt;td style="font-size:medium;padding:12px;"&gt;&lt;a href="https://developer.android.com/studio/projects/install-ndk?hl=zh-cn#specific-version"&gt;安装&lt;/a&gt;或&lt;a href="https://developer.android.com/studio/projects/install-ndk?hl=zh-cn#apply-specific-version"&gt;配置&lt;/a&gt;其他版本的 NDK。
    &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3 data-text="新功能" id="4-1-0-new"&gt;新功能&lt;/h3&gt;
&lt;p&gt;此版本的 Android Gradle 插件包含以下新功能。&lt;/p&gt;
&lt;h4 data-text="Kotlin 脚本 DSL 支持" id="kotlin-script-dsl-support"&gt;Kotlin 脚本 DSL 支持&lt;/h4&gt;
&lt;p&gt;为了帮助提升 Kotlin 构建脚本用户的修改体验，现在 Android Gradle 插件 4.1 的 DSL 和 API 在一组 Kotlin 接口中与其实现类分开定义。这意味着：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;现在，在 Kotlin 类型上明确声明了是否可为 null 和可变性。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.android.com/reference/tools/gradle-api?hl=zh-cn"&gt;Kotlin API 参考文档&lt;/a&gt;中发布了根据这些接口生成的文档。&lt;/li&gt;
&lt;li&gt;明确定义了 Android Gradle 插件的 API 接口，使未来扩展的 Android build 更加稳定。&lt;/li&gt;
&lt;/ul&gt;
&lt;aside class="special"&gt;&lt;strong&gt;重要提示&lt;/strong&gt;：&lt;span&gt;如果您已采用 KTS 构建脚本或在 &lt;code dir="ltr" translate="no"&gt;buildSrc&lt;/code&gt; 中使用 Kotlin，这样可能会因某些错误而导致源代码兼容性被破坏，这些错误在以前的版本中原本表现为运行时错误。&lt;/span&gt;&lt;/aside&gt;
&lt;p&gt;在 DSL 中设计为改变的集合类型现在一律定义为：&lt;/p&gt;
&lt;p&gt;&lt;code dir="ltr" translate="no"&gt;val collection: MutableCollectionType&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这意味着，对于以前支持 DSL 的某些集合，无法再在 Kotlin 脚本中编写以下代码：&lt;/p&gt;
&lt;p&gt;&lt;code dir="ltr" translate="no"&gt;collection = collectionTypeOf(...)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;不过，一律支持改变集合，因此 &lt;code dir="ltr" translate="no"&gt;collection += …&lt;/code&gt; 和 &lt;code dir="ltr" translate="no"&gt;collection.add(...)&lt;/code&gt; 现在应处处适用。&lt;/p&gt;
&lt;p&gt;如果您在升级使用 Android Gradle 插件 Kotlin API 和 DSL 的项目时发现任何问题，请&lt;a href="https://issuetracker.google.com/issues/new?component=192709&amp;amp;%3Btemplate=842921&amp;amp;hl=zh-cn"&gt;报告错误&lt;/a&gt;。&lt;/p&gt;
&lt;h4 data-text="从 AAR 导出 C/C++ 依赖项" id="4.1-prefab-publish"&gt;从 AAR 导出 C/C++ 依赖项&lt;/h4&gt;
&lt;p&gt;Android Gradle 插件 4.0 添加了&lt;a href="https://developer.android.com/studio/releases/gradle-plugin?hl=zh-cn#native-dependencies"&gt;将 Prefab 软件包导入 AAR 依赖项&lt;/a&gt;的功能。在 AGP 4.1 中，现在可以将外部原生 build 中的库导出到 Android 库项目的 AAR 中。&lt;/p&gt;
&lt;p&gt;如需导出原生库，请将以下代码添加到库项目的 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件的 &lt;code dir="ltr" translate="no"&gt;android&lt;/code&gt; 代码块中：&lt;/p&gt;
&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;

buildFeatures {
    prefabPublishing true
}

prefab {
    &lt;var translate="no"&gt;mylibrary&lt;/var&gt; {
      headers "src/main/cpp/&lt;var translate="no"&gt;mylibrary&lt;/var&gt;/include"
    }

    &lt;var translate="no"&gt;myotherlibrary&lt;/var&gt; {
        headers "src/main/cpp/&lt;var translate="no"&gt;myotherlibrary&lt;/var&gt;/include"
    }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;

buildFeatures {
    prefabPublishing = true
}

prefab {
    create("&lt;var translate="no"&gt;mylibrary&lt;/var&gt;") {
      headers = "src/main/cpp/&lt;var translate="no"&gt;mylibrary&lt;/var&gt;/include"
    }

    create("&lt;var translate="no"&gt;myotherlibrary&lt;/var&gt;") {
        headers = "src/main/cpp/&lt;var translate="no"&gt;myotherlibrary&lt;/var&gt;/include"
    }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;在本例中，您的 ndk-build 或 CMake 外部原生 build 中的 &lt;code dir="ltr" translate="no"&gt;mylibrary&lt;/code&gt; 和 &lt;code dir="ltr" translate="no"&gt;myotherlibrary&lt;/code&gt; 库会打包到您的 build 生成的 AAR 中，并且各自会将头文件从指定的目录导出到依赖于它们的项。&lt;/p&gt;
&lt;aside class="note"&gt;&lt;strong&gt;注意&lt;/strong&gt;：&lt;span&gt;对于 Android Gradle 插件 4.0 及更高版本的用户，导入预构建原生库的配置设置已发生更改。如需了解详情，请参阅 &lt;a href="#cmake-imported-targets"&gt;4.0 版本说明&lt;/a&gt;。&lt;/span&gt;&lt;/aside&gt;
&lt;h4 data-text="R8 对 Kotlin 元数据的支持" id="4.1-kotlin-metadata"&gt;R8 对 Kotlin 元数据的支持&lt;/h4&gt;
&lt;p&gt;Kotlin 使用 Java 类文件中的自定义元数据标识 Kotlin 语言结构。R8 现在支持维护和重新编写 Kotlin 元数据，以完全支持缩减使用 &lt;code dir="ltr" translate="no"&gt;kotlin-reflect&lt;/code&gt; 功能的 Kotlin 库和应用大小。&lt;/p&gt;
&lt;p&gt;如需保留 Kotlin 元数据，请添加以下保留规则：&lt;/p&gt;
&lt;pre class="devsite-click-to-copy" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;-keep class kotlin.Metadata { *; }

-keepattributes RuntimeVisibleAnnotations
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这将指示 R8 保留直接保留的所有类的 Kotlin 元数据。&lt;/p&gt;
&lt;p&gt;如需了解详情，请参阅 Medium 上的&lt;a class="external" href="https://medium.com/androiddevelopers/shrinking-kotlin-libraries-and-applications-using-kotlin-reflection-with-r8-6fe0a0e2d115"&gt;借助 R8 缩减使用 Kotlin 反射功能的 Kotlin 库和应用大小&lt;/a&gt;。&lt;/p&gt;
&lt;h4 data-text="调试 build 中的断言" id="4.1-debug-assertions"&gt;调试 build 中的断言&lt;/h4&gt;
&lt;p&gt;当您使用 Android Gradle 插件 4.1.0 及更高版本构建应用的调试版本时，内置编译器 (D8) 会重写应用代码以在编译时启用断言，因此您要始终将断言检查置于启用状态。&lt;/p&gt;
&lt;h3 data-text="行为变更" id="behavior_changes"&gt;行为变更&lt;/h3&gt;
&lt;h4 data-text="移除了 Android Gradle 插件构建缓存" id="4.1-build-cache-removed"&gt;移除了 Android Gradle 插件构建缓存&lt;/h4&gt;
&lt;p&gt;AGP 构建缓存已在 AGP 4.1 中移除。AGP 构建缓存之前在 AGP 2.3 中引入，对 Gradle 构建缓存起到了补充的作用；在 AGP 4.1 中，AGP 构建缓存已完全被 Gradle 构建缓存所取代。此次变更不会影响构建时间。&lt;/p&gt;
&lt;p&gt;&lt;code dir="ltr" translate="no"&gt;cleanBuildCache&lt;/code&gt; 任务以及 &lt;code dir="ltr" translate="no"&gt;android.enableBuildCache&lt;/code&gt; 和 &lt;code dir="ltr" translate="no"&gt;android.buildCacheDir&lt;/code&gt; 属性已被废弃，将在 AGP 7.0 中移除。&lt;code dir="ltr" translate="no"&gt;android.enableBuildCache&lt;/code&gt; 属性目前不起任何作用，而 &lt;code dir="ltr" translate="no"&gt;android.buildCacheDir&lt;/code&gt; 属性和 &lt;code dir="ltr" translate="no"&gt;cleanBuildCache&lt;/code&gt; 任务在 AGP 7.0 之前将一直发挥作用，用于删除任何现有的 AGP 构建缓存内容。&lt;/p&gt;
&lt;h4 data-text="使用代码缩减功能后应用的大小显著减小" id="4.1-app-size-reduction"&gt;使用代码缩减功能后应用的大小显著减小&lt;/h4&gt;
&lt;p&gt;从此版本开始，&lt;a href="https://issuetracker.google.com/142449264?hl=zh-cn"&gt;默认不再保留&lt;/a&gt; R 类中的字段。这样一来，启用代码缩减的应用的 APK 大小将会显著减少。这应该不会导致行为变更，除非您通过反射功能访问 R 类；如果您通过反射功能访问 R 类，就必须针对这些 R 类&lt;a href="https://developer.android.com/studio/build/shrink-code?hl=zh-cn#keep-code"&gt;添加保留规则&lt;/a&gt;。&lt;/p&gt;
&lt;h4 data-text="android.namespacedRClass 属性已重命名为 android.nonTransitiveRClass" id="4.1-nontransitive-r-class"&gt;android.namespacedRClass 属性已重命名为 android.nonTransitiveRClass&lt;/h4&gt;
&lt;p&gt;实验性标记 &lt;code dir="ltr" translate="no"&gt;android.namespacedRClass&lt;/code&gt; 已重命名为 &lt;code dir="ltr" translate="no"&gt;android.nonTransitiveRClass&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;此标志在 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中设置，可启用每个库的 R 类的命名空间，以便其 R 类仅包含库本身中声明的资源，而不包含库的依赖项中的任何资源，从而缩减相应库的 R 类大小。&lt;/p&gt;
&lt;h4 data-text="Kotlin DSL：coreLibraryDesugaringEnabled 已重命名" id="4.1-dsl-desugaring"&gt;Kotlin DSL：coreLibraryDesugaringEnabled 已重命名&lt;/h4&gt;
&lt;p&gt;Kotlin DSL 编译选项 &lt;code dir="ltr" translate="no"&gt;coreLibraryDesugaringEnabled&lt;/code&gt; 已更改为 &lt;a href="https://developer.android.com/reference/tools/gradle-api/4.1/com/android/build/api/dsl/CompileOptions?hl=zh-cn#iscorelibrarydesugaringenabled"&gt;&lt;code dir="ltr" translate="no"&gt;isCoreLibraryDesugaringEnabled&lt;/code&gt;&lt;/a&gt;。如需详细了解此标记，请参阅 &lt;a href="https://developer.android.com/studio/write/java8-support?hl=zh-cn#library-desugaring"&gt;Java 8+ API 脱糖支持 (Android Gradle 插件 4.0.0+)&lt;/a&gt;。&lt;/p&gt;
&lt;h4 data-text="从库项目中的 BuildConfig 类中移除了版本属性" id="version_properties_removed_from_buildconfig_class_in_library_projects"&gt;从库项目中的 BuildConfig 类中移除了版本属性&lt;/h4&gt;
&lt;p&gt;仅对于库项目而言，&lt;code dir="ltr" translate="no"&gt;BuildConfig.VERSION_NAME&lt;/code&gt; 和 &lt;code dir="ltr" translate="no"&gt;BuildConfig.VERSION_CODE&lt;/code&gt; 属性已从生成的 &lt;code dir="ltr" translate="no"&gt;BuildConfig&lt;/code&gt; 类中移除，因为这些静态值过去并不反映应用版本代码和名称的最终值，因此具有误导性。此外，这些值过去在清单合并期间会被舍弃。&lt;/p&gt;
&lt;p&gt;在将来的 Android Gradle 插件版本中，&lt;code dir="ltr" translate="no"&gt;versionName&lt;/code&gt; 和 &lt;code dir="ltr" translate="no"&gt;versionCode&lt;/code&gt; 属性也会从库的 DSL 中移除。目前，无法从库子项目自动获取应用版本代码/名称。&lt;/p&gt;
&lt;p&gt;对于应用模块而言，没有发生变化，您仍然可以在 DSL 中为 &lt;code dir="ltr" translate="no"&gt;versionCode&lt;/code&gt; 和 &lt;code dir="ltr" translate="no"&gt;versionName&lt;/code&gt; 赋值，这些值将传播到应用的清单和 &lt;code dir="ltr" translate="no"&gt;BuildConfig&lt;/code&gt; 字段。&lt;/p&gt;
&lt;h4 data-text="设置 NDK 路径" id="ndk-path"&gt;设置 NDK 路径&lt;/h4&gt;
&lt;p&gt;您可以使用模块的 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中的 &lt;code dir="ltr" translate="no"&gt;android.ndkPath&lt;/code&gt; 属性设置本地 NDK 安装的路径。&lt;/p&gt;
&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;
android {
   ndkPath "&lt;var translate="no"&gt;your-custom-ndk-path&lt;/var&gt;"
}
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;
android {
   ndkPath = "&lt;var translate="no"&gt;your-custom-ndk-path&lt;/var&gt;"
}
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;如果您将此属性与 &lt;a href="https://developer.android.com/studio/projects/install-ndk?hl=zh-cn#apply-specific-version"&gt;&lt;code dir="ltr" translate="no"&gt;android.ndkVersion&lt;/code&gt; 属性&lt;/a&gt;一起使用，则此路径必须包含与 &lt;code dir="ltr" translate="no"&gt;android.ndkVersion&lt;/code&gt; 匹配的 NDK 版本。&lt;/p&gt;
&lt;h4 data-text="库单元测试行为变更" id="library-unit-tests"&gt;库单元测试行为变更&lt;/h4&gt;
&lt;p&gt;我们更改了如何编译和运行库单元测试的行为。库的单元测试现在针对库本身的编译/运行时类编译和运行，使得单元测试以与外部子项目相同的方式使用库。此配置通常会使测试效果更好。&lt;/p&gt;
&lt;p&gt;在某些情况下，使用数据绑定的库单元测试可能会遇到缺少 &lt;a href="https://developer.android.com/reference/android/databinding/DataBindingComponent?hl=zh-cn"&gt;&lt;code dir="ltr" translate="no"&gt;DataBindingComponent&lt;/code&gt;&lt;/a&gt; 或 &lt;a href="https://developer.android.com/topic/libraries/data-binding/generated-binding?hl=zh-cn#dynamic_variables"&gt;&lt;code dir="ltr" translate="no"&gt;BR&lt;/code&gt;&lt;/a&gt; 类的情况。这些测试需要移植到 &lt;code dir="ltr" translate="no"&gt;androidTest&lt;/code&gt; 项目中的插桩测试，因为在单元测试中针对这些类编译和运行可能会生成错误的输出。&lt;/p&gt;
&lt;h3 data-text="废弃了 io.fabric Gradle 插件" id="4.1-io.fabric-deprecated"&gt;废弃了 io.fabric Gradle 插件&lt;/h3&gt;
&lt;p&gt;io.fabric Gradle 插件已废弃，与 Android Gradle 插件版本 4.1 不兼容。如需详细了解已废弃的 Fabric SDK 以及如何迁移到 Firebase Crashlytics SDK，请参阅&lt;a href="https://firebase.google.com/docs/crashlytics/upgrade-sdk?platform=android&amp;amp;hl=zh-cn"&gt;升级到 Firebase Crashlytics SDK&lt;/a&gt;。&lt;/p&gt;
</description><author>Google</author><pubDate>2020-08-01 00:00:00</pubDate></item><item><title>4.0.0（2020 年 4 月）</title><link>https://developer.android.com/studio/releases/gradle-plugin?hl=zh-cn</link><description>
&lt;p&gt;此版本的 Android 插件需要使用以下工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.gradle.org/6.1.1/release-notes.html"&gt;Gradle 6.1.1&lt;/a&gt;。如需了解详情，请阅读有关&lt;a href="#updating-gradle"&gt;更新 Gradle&lt;/a&gt; 的部分。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.android.com/studio/releases/build-tools?hl=zh-cn#notes"&gt;SDK Build Tools 29.0.2&lt;/a&gt; 或更高版本。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="android-updates-box"&gt;
&lt;p&gt;&lt;b&gt;4.0.1（2020 年 7 月）&lt;a name="4.0.1"&gt;&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;a name="4.0.1"&gt;
&lt;/a&gt;&lt;p&gt;&lt;a name="4.0.1"&gt;
    本次要更新支持&lt;/a&gt;与 &lt;a href="https://developer.android.com/about/versions/11/privacy/package-visibility?hl=zh-cn"&gt;Android 11 中软件包可见性&lt;/a&gt;的新默认设置和功能兼容。
  &lt;/p&gt;
&lt;p&gt;在以前的 Android 版本中，可以查看设备上安装的所有应用的列表。从 Android 11（API 级别 30）开始，默认情况下，应用只能访问经过过滤的已安装软件包列表。如需查看系统上更广泛的应用列表，您现在需要在应用或库的 Android 清单中&lt;a href="https://developer.android.com/training/basics/intents/package-visibility?hl=zh-cn#package-name"&gt;添加 &lt;code dir="ltr" translate="no"&gt;&amp;lt;queries&amp;gt;&lt;/code&gt; 元素&lt;/a&gt;。
  &lt;/p&gt;
&lt;p&gt;Android Gradle 插件 4.1 及更高版本已与新的 &lt;code dir="ltr" translate="no"&gt;&amp;lt;queries&amp;gt;&lt;/code&gt; 声明兼容；不过，较低的版本不兼容。如果您添加 &lt;code dir="ltr" translate="no"&gt;&amp;lt;queries&amp;gt;&lt;/code&gt; 元素或者开始依赖于支持以 Android 11 为目标平台的库或 SDK，在构建应用时可能会遇到清单合并错误。
  &lt;/p&gt;
&lt;p&gt;
  为了解决此问题，我们将针对 AGP 3.3 及更高版本发布一组补丁程序。如果您使用的是旧版 AGP，请&lt;a href="https://developer.android.com/studio/releases/gradle-plugin?buildsystem=ndk-build&amp;amp;hl=zh-cn#updating-plugin"&gt;升级&lt;/a&gt;到以下某个版本：
  &lt;/p&gt;
&lt;center&gt;
&lt;table style="max-width:400px;"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align:center;"&gt;&lt;b&gt;如果您使用的是 &lt;br/&gt;AGP 版本...&lt;/b&gt;
&lt;/th&gt;
&lt;th style="text-align:center;"&gt;&lt;b&gt;...请升级到&lt;/b&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td style="text-align:center;"&gt;4.0.*
       &lt;/td&gt;
&lt;td style="text-align:center;"&gt;4.0.1
       &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center;"&gt;3.6.*
       &lt;/td&gt;
&lt;td style="text-align:center;"&gt;3.6.4
       &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center;"&gt;3.5.*
       &lt;/td&gt;
&lt;td style="text-align:center;"&gt;3.5.4
       &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center;"&gt;3.4.*
       &lt;/td&gt;
&lt;td style="text-align:center;"&gt;3.4.3
       &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:center;"&gt;3.3.*
       &lt;/td&gt;
&lt;td style="text-align:center;"&gt;3.3.3
       &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/center&gt;
&lt;p&gt;
  如需详细了解这项新功能，请参阅 &lt;a href="https://developer.android.com/about/versions/11/privacy/package-visibility?hl=zh-cn"&gt;Android 11 中的软件包可见性&lt;/a&gt;。
  &lt;/p&gt;
&lt;/div&gt;
&lt;h3 data-text="新功能" id="4-0-0-new"&gt;新功能&lt;/h3&gt;
&lt;p&gt;此版本的 Android Gradle 插件包含以下新功能。&lt;/p&gt;
&lt;h4 data-text="对 Android Studio Build Analyzer 的支持" id="build-analyzer"&gt;对 Android Studio Build Analyzer 的支持&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Build Analyzer&lt;/strong&gt; 窗口可帮助您了解和诊断与构建流程有关的问题，如优化被停用和任务配置不当问题。当您将 Android Studio 4.0 及更高版本与 Android Gradle 插件 &lt;code dir="ltr" translate="no"&gt;4.0.0&lt;/code&gt; 及更高版本一起使用时，此功能可用。您可以从 Android Studio 中打开 &lt;strong&gt;Build Analyzer&lt;/strong&gt; 窗口，具体操作步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过从菜单栏中依次选择 &lt;strong&gt;Build &amp;gt; Make Project&lt;/strong&gt; 来构建应用（如果您尚未这样做）。&lt;/li&gt;
&lt;li&gt;从菜单栏中依次选择 &lt;strong&gt;View &amp;gt; Tool Windows &amp;gt; Build&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在 &lt;strong&gt;Build&lt;/strong&gt; 窗口中，通过以下某种方式打开 &lt;strong&gt;Build Analyzer&lt;/strong&gt; 窗口：
&lt;ul&gt;
&lt;li&gt;Android Studio 构建完您的项目后，点击 &lt;strong&gt;Build Analyzer&lt;/strong&gt; 标签页。&lt;/li&gt;
&lt;li&gt;Android Studio 构建完您的项目后，点击 &lt;strong&gt;Build Output&lt;/strong&gt; 窗口右侧的链接。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" sizes="(max-width: 840px) 100vw, 856px" src="https://developer.android.com/static/studio/images/build/build-analyzer/plugins-breakdown.png?hl=zh-cn" srcset="https://developer.android.com/static/studio/images/build/build-analyzer/plugins-breakdown_36.png?hl=zh-cn 36w,https://developer.android.com/static/studio/images/build/build-analyzer/plugins-breakdown_48.png?hl=zh-cn 48w,https://developer.android.com/static/studio/images/build/build-analyzer/plugins-breakdown_72.png?hl=zh-cn 72w,https://developer.android.com/static/studio/images/build/build-analyzer/plugins-breakdown_96.png?hl=zh-cn 96w,https://developer.android.com/static/studio/images/build/build-analyzer/plugins-breakdown_480.png?hl=zh-cn 480w,https://developer.android.com/static/studio/images/build/build-analyzer/plugins-breakdown_720.png?hl=zh-cn 720w,https://developer.android.com/static/studio/images/build/build-analyzer/plugins-breakdown_856.png?hl=zh-cn 856w,https://developer.android.com/static/studio/images/build/build-analyzer/plugins-breakdown_960.png?hl=zh-cn 960w,https://developer.android.com/static/studio/images/build/build-analyzer/plugins-breakdown_1440.png?hl=zh-cn 1440w,https://developer.android.com/static/studio/images/build/build-analyzer/plugins-breakdown_1920.png?hl=zh-cn 1920w,https://developer.android.com/static/studio/images/build/build-analyzer/plugins-breakdown_2880.png?hl=zh-cn 2880w"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build Analyzer&lt;/strong&gt; 窗口将可能存在的构建问题整理成左侧的树状图。您可以检查并点击每个问题，以在右侧的面板中调查其详细信息。当 Android Studio 分析您的 build 时，它会计算决定构建时长的一组任务，并提供直观的图表来帮助您了解其中每项任务所产生的影响。您也可以展开 &lt;strong&gt;Warnings&lt;/strong&gt; 节点，以获取有关警告的详细信息。&lt;/p&gt;
&lt;p&gt;如需了解详情，请参阅&lt;a href="https://developer.android.com/studio/build/build-analyzer?hl=zh-cn"&gt;发现构建速度减慢的问题&lt;/a&gt;。&lt;/p&gt;
&lt;h4 data-text="D8 和 R8 中的 Java 8 库脱糖" id="j8-library-desugaring"&gt;D8 和 R8 中的 Java 8 库脱糖&lt;/h4&gt;
&lt;p&gt;Android Gradle 插件现在支持使用多种 Java 8 语言 API，而无需为应用设置最低 API 级别。&lt;/p&gt;
&lt;p&gt;通过一个称为“脱糖”的过程，Android Studio 3.0 及更高版本中的 DEX 编译器 D8 已经为 Java 8 语言功能（如 lambda 表达式、默认接口方法、try-with-resources 等等）提供了大量的支持。&lt;em&gt;&lt;/em&gt;在 Android Studio 4.0 中，脱糖引擎经过扩展，能够使 Java 语言 API 脱糖。这意味着，您现在可以在支持旧版 Android 的应用中添加过去仅在最新 Android 版本中可用的标准语言 API（如 &lt;code dir="ltr" translate="no"&gt;java.util.streams&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;此版本支持下面一组 API：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顺序流 (&lt;code dir="ltr" translate="no"&gt;java.util.stream&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code dir="ltr" translate="no"&gt;java.time&lt;/code&gt; 的子集&lt;/li&gt;
&lt;li&gt;&lt;code dir="ltr" translate="no"&gt;java.util.function&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code dir="ltr" translate="no"&gt;java.util.{Map,Collection,Comparator}&lt;/code&gt; 的最近新增内容&lt;/li&gt;
&lt;li&gt;可选内容（&lt;code dir="ltr" translate="no"&gt;java.util.Optional&lt;/code&gt;、&lt;code dir="ltr" translate="no"&gt;java.util.OptionalInt&lt;/code&gt; 和 &lt;code dir="ltr" translate="no"&gt;java.util.OptionalDouble&lt;/code&gt;）以及对上述 API 很有用的一些其他新类&lt;/li&gt;
&lt;li&gt;&lt;code dir="ltr" translate="no"&gt;java.util.concurrent.atomic&lt;/code&gt; 的一些新增内容（&lt;code dir="ltr" translate="no"&gt;AtomicInteger&lt;/code&gt;、&lt;code dir="ltr" translate="no"&gt;AtomicLong&lt;/code&gt; 和 &lt;code dir="ltr" translate="no"&gt;AtomicReference&lt;/code&gt; 的新方法）&lt;/li&gt;
&lt;li&gt;&lt;code dir="ltr" translate="no"&gt;ConcurrentHashMap&lt;/code&gt;（包含 Android 5.0 的 bug 修复）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了支持这些语言 API，D8 编译了一个单独的 DEX 文件（其中包含缺失 API 的实现），并将其添加到您的应用中。脱糖过程会重新编写应用的代码，以便在运行时改用此库。&lt;/p&gt;
&lt;p&gt;如需启用对这些语言 API 的支持，请在&lt;b&gt;应用模块&lt;/b&gt;的 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中添加以下代码：&lt;/p&gt;
&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;

android {
  defaultConfig {
    // Required when setting minSdkVersion to 20 or lower
    multiDexEnabled true
  }

  compileOptions {
    // Flag to enable support for the new language APIs
    coreLibraryDesugaringEnabled true
    // Sets Java compatibility to Java 8
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

dependencies {
  coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.0.4'
}
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;

android {
  defaultConfig {
    // Required when setting minSdkVersion to 20 or lower
    multiDexEnabled = true
  }

  compileOptions {
    // Flag to enable support for the new language APIs
    isCoreLibraryDesugaringEnabled = true
    // Sets Java compatibility to Java 8
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
  }
}

dependencies {
  coreLibraryDesugaring("com.android.tools:desugar_jdk_libs:1.0.4")
}
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;请注意，在以下情况下，您可能还需要在相应&lt;b&gt;库模块&lt;/b&gt;的 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中添加以上代码段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;库模块的插桩测试会使用这些语言 API（直接使用，或者通过库模块或其依赖项使用）。这是为了向您的插桩测试 APK 提供缺失的 API。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;您想单独在该库模块上运行 lint。这是为了帮助 lint 识别出对语言 API 的有效使用，并避免错误地发出警告。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-text="用于启用或停用构建功能的新选项" id="buildFeatures"&gt;用于启用或停用构建功能的新选项&lt;/h4&gt;
&lt;p&gt;Android Gradle 插件 4.0.0 引入了一种新方法来控制您要启用和停用哪些构建功能，如视图绑定和数据绑定。添加新功能后，默认情况下，这些功能处于停用状态。您随后可以使用 &lt;code dir="ltr" translate="no"&gt;buildFeatures&lt;/code&gt; 代码块来仅启用所需的功能，它可以帮助您优化项目的构建性能。您可以在模块级 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中为每个模块设置相应的选项，如下所示：&lt;/p&gt;
&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;

android {
    // The default value for each feature is shown below. You can change the value to
    // override the default behavior.
    buildFeatures {
        // Determines whether to generate a BuildConfig class.
        buildConfig = true
        // Determines whether to support View Binding.
        // Note that the viewBinding.enabled property is now deprecated.
        viewBinding = false
        // Determines whether to support Data Binding.
        // Note that the dataBinding.enabled property is now deprecated.
        dataBinding = false
        // Determines whether to generate binder classes for your AIDL files.
        aidl = true
        // Determines whether to support RenderScript.
        renderScript = true
        // Determines whether to support injecting custom variables into the module’s R class.
        resValues = true
        // Determines whether to support shader AOT compilation.
        shaders = true
    }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;

android {
    // The default value for each feature is shown below. You can change the value to
    // override the default behavior.
    buildFeatures {
        // Determines whether to generate a BuildConfig class.
        buildConfig = true
        // Determines whether to support View Binding.
        // Note that the viewBinding.enabled property is now deprecated.
        viewBinding = false
        // Determines whether to support Data Binding.
        // Note that the dataBinding.enabled property is now deprecated.
        dataBinding = false
        // Determines whether to generate binder classes for your AIDL files.
        aidl = true
        // Determines whether to support RenderScript.
        renderScript = true
        // Determines whether to support injecting custom variables into the module’s R class.
        resValues = true
        // Determines whether to support shader AOT compilation.
        shaders = true
    }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;您还可以为项目中的所有模块指定这些功能的默认设置，方法是在项目的 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中添加下面的一项或多项，如下所示。请注意，您仍然可以使用模块级 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中的 &lt;code dir="ltr" translate="no"&gt;buildFeatures&lt;/code&gt; 代码块替换这些项目范围的默认设置。&lt;/p&gt;
&lt;pre class="devsite-click-to-copy" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;android.defaults.buildfeatures.buildconfig=true
android.defaults.buildfeatures.aidl=true
android.defaults.buildfeatures.renderscript=true
android.defaults.buildfeatures.resvalues=true
android.defaults.buildfeatures.shaders=true
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-text="功能对功能的依赖性" id="feature-on-feature"&gt;功能对功能的依赖性&lt;/h4&gt;
&lt;p&gt;在以前的 Android Gradle 插件版本中，所有功能模块都只能依赖于应用的基本模块。使用 Android Gradle 插件 4.0.0 时，您现在可以添加依赖于其他功能模块的功能模块。也就是说，&lt;code dir="ltr" translate="no"&gt;:video&lt;/code&gt; 功能可以依赖于 &lt;code dir="ltr" translate="no"&gt;:camera&lt;/code&gt; 功能，而后者依赖于基本模块，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img alt="功能对功能的依赖性" src="https://developer.android.com/static/images/app-bundle/feature-on-feature.png?hl=zh-cn"/&gt;
&lt;/p&gt;&lt;p class="img-caption"&gt;&lt;code dir="ltr" translate="no"&gt;:video&lt;/code&gt; 功能模块依赖于 &lt;code dir="ltr" translate="no"&gt;:camera&lt;/code&gt; 功能，而后者依赖于 &lt;code dir="ltr" translate="no"&gt;:app&lt;/code&gt; 基本模块。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;这意味着，当您的应用请求下载某个功能模块时，它也会下载该模块所依赖的其他功能模块。为您的应用&lt;a href="https://developer.android.com/studio/projects/dynamic-delivery/on-demand-delivery?hl=zh-cn"&gt;创建功能模块&lt;/a&gt;后，您可以在模块的 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中声明功能对功能的依赖性。例如，&lt;code dir="ltr" translate="no"&gt;:video&lt;/code&gt; 模块声明对 &lt;code dir="ltr" translate="no"&gt;:camera&lt;/code&gt; 的依赖性，如下所示：&lt;/p&gt;
&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;

// In the build.gradle file of the ':video' module.
dependencies {
    // All feature modules must declare a dependency
    // on the base module.
    implementation project(':app')
    // Declares that this module also depends on the 'camera'
    // feature module.
    implementation project(':camera')
    ...
}
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;

// In the build.gradle file of the ':video' module.
dependencies {
    // All feature modules must declare a dependency
    // on the base module.
    implementation(project(":app"))
    // Declares that this module also depends on the 'camera'
    // feature module.
    implementation(project(":camera"))
    ...
}
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;此外，您还应在 Android Studio 中启用功能对功能的依赖性功能（例如，为了在修改运行配置时支持该功能），方法是从菜单栏中依次点击 &lt;strong&gt;Help &amp;gt; Edit Custom VM Options&lt;/strong&gt;，并添加以下代码：&lt;/p&gt;
&lt;pre class="devsite-click-to-copy" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;-Drundebug.feature.on.feature=true
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-text="依赖项元数据" id="dependency-metadata"&gt;依赖项元数据&lt;/h4&gt;
&lt;p&gt;使用 Android Gradle 插件 4.0.0 及更高版本构建应用时，该插件包含描述已编译到应用中的依赖项的元数据。上传应用时，Play 管理中心会检查此元数据，以便为您提供以下优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取有关您的应用使用的 SDK 和依赖项的已知问题的提醒&lt;/li&gt;
&lt;li&gt;接收切实可行的反馈来解决这些问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据经过压缩，并由 Google Play 签名密钥加密，然后存储在您的发布应用的签名分块中。但是，您可以在以下目录中的本地中间 build 文件中自行检查元数据：&lt;code dir="ltr" translate="no"&gt;&amp;lt;project&amp;gt;/&amp;lt;module&amp;gt;/build/outputs/sdk-dependencies/release/sdkDependency.txt&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果您不希望分享这些信息，您可以通过在模块的 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中添加以下代码来选择退出：&lt;/p&gt;
&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;

android {
    dependenciesInfo {
        // Disables dependency metadata when building APKs.
        includeInApk = false
        // Disables dependency metadata when building Android App Bundles.
        includeInBundle = false
    }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;

android {
    dependenciesInfo {
        // Disables dependency metadata when building APKs.
        includeInApk = false
        // Disables dependency metadata when building Android App Bundles.
        includeInBundle = false
    }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h4 data-text="从 AAR 依赖项导入原生库" id="native-dependencies"&gt;从 AAR 依赖项导入原生库&lt;/h4&gt;
&lt;p&gt;您现在可以从应用的 AAR 依赖项导入 C/C++ 库。当您按照下述配置步骤操作时，Gradle 会自动使这些原生库可供您的外部原生构建系统（如 CMake）使用。请注意，Gradle 仅向您的 build 提供这些库；您仍然必须配置构建脚本才能使用它们。&lt;/p&gt;
&lt;p&gt;系统会以 &lt;a class="external" href="https://google.github.io/prefab/"&gt;Prefab&lt;/a&gt; 软件包格式将库导出。&lt;/p&gt;
&lt;p&gt;每个依赖项最多可公开一个 Prefab 软件包，该软件包由一个或多个模块组成。Prefab 模块是一个库，它可以是共享库或静态库，也可以是仅包含头文件的库。&lt;/p&gt;
&lt;p&gt;通常，软件包名称与 Maven 工件名称匹配，模块名称与库名称匹配，但并不总是如此。由于您需要知道库的软件包和模块名称，因此您可能需要参考依赖项文档以确定这些名称。&lt;/p&gt;
&lt;h5 data-text="配置外部原生构建系统" id="configure-external-build"&gt;配置外部原生构建系统&lt;/h5&gt;
&lt;p&gt;如需查看您需要遵循的步骤，请点击您计划使用的外部原生构建系统。&lt;/p&gt;
&lt;p&gt;&lt;devsite-nav-buttons id="configure-external-build" name="buildsystem"&gt;
&lt;button default="" value="cmake"&gt;CMake&lt;/button&gt;
&lt;button value="ndk-build"&gt;ndk-build&lt;/button&gt;
&lt;/devsite-nav-buttons&gt;&lt;/p&gt;
&lt;p&gt;AAR 中包含的原生依赖项通过 &lt;a class="external" href="https://cmake.org/cmake/help/latest/variable/CMAKE_FIND_ROOT_PATH.html"&gt;CMAKE_FIND_ROOT_PATH&lt;/a&gt; 变量向您的 CMake 项目公开。当系统调用 CMake 时，Gradle 会自动设置此值，因此如果您的构建系统修改了此变量，请务必对其附加相应值而不是直接赋值。&lt;/p&gt;
&lt;p&gt;每个依赖项都会向您的 CMake build 公开 &lt;a class="external" href="https://cmake.org/cmake/help/latest/manual/cmake-packages.7.html#config-file-packages"&gt;config-file 软件包&lt;/a&gt;，您可以使用 &lt;a class="external" href="https://cmake.org/cmake/help/latest/command/find_package.html"&gt;&lt;code dir="ltr" translate="no"&gt;find_package&lt;/code&gt;&lt;/a&gt; 命令将其导入。此命令会搜索与给定软件包名称和版本匹配的 config-file 软件包，并公开它定义的要在您的 build 中使用的目标。例如，如果您的应用定义了 &lt;code dir="ltr" translate="no"&gt;libapp.so&lt;/code&gt; 并且使用了 curl，您应在 &lt;code dir="ltr" translate="no"&gt;CMakeLists.txt&lt;/code&gt; 文件中添加以下代码：&lt;/p&gt;
&lt;pre class="prettyprint lang-cmake" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;add_library(app SHARED app.cpp)

# Add these two lines.
find_package(curl REQUIRED CONFIG)
target_link_libraries(app curl::curl)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;您现在可以在 &lt;code dir="ltr" translate="no"&gt;app.cpp&lt;/code&gt; 中指定 &lt;code dir="ltr" translate="no"&gt;#include "curl/curl.h"&lt;/code&gt;。当您构建项目时，您的外部原生构建系统会自动关联 &lt;code dir="ltr" translate="no"&gt;libapp.so&lt;/code&gt; 与 &lt;code dir="ltr" translate="no"&gt;libcurl.so&lt;/code&gt; 并将 &lt;code dir="ltr" translate="no"&gt;libcurl.so&lt;/code&gt; 打包在 APK 或 app bundle 中。如需了解详情，请参阅 &lt;a class="external" href="https://github.com/android/ndk-samples/tree/main/prefab/curl-ssl"&gt;curl prefab 示例&lt;/a&gt;。&lt;/p&gt;
&lt;h3 data-text="行为变更" id="4-0-0-behavior"&gt;行为变更&lt;/h3&gt;
&lt;p&gt;使用此版本的插件时，您可能会遇到以下行为方面的变更。&lt;/p&gt;
&lt;h4 data-text="v1/v2 签名配置更新" id="4-0-signing-config"&gt;v1/v2 签名配置更新&lt;/h4&gt;
&lt;p&gt;&lt;code dir="ltr" translate="no"&gt;signingConfig&lt;/code&gt; 块中应用签名配置的行为变更如下：&lt;/p&gt;
&lt;h5 data-text="v1 签名" id="v1_signing"&gt;v1 签名&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;如果 &lt;code dir="ltr" translate="no"&gt;v1SigningEnabled&lt;/code&gt; 已显式启用，AGP 会执行 v1 应用签名。&lt;/li&gt;
&lt;li&gt;如果用户显式停用了 &lt;code dir="ltr" translate="no"&gt;v1SigningEnabled&lt;/code&gt;，v1 应用签名便不会执行。&lt;/li&gt;
&lt;li&gt;如果用户未显式启用 v1 签名，系统可能会根据 &lt;code dir="ltr" translate="no"&gt;minSdk&lt;/code&gt; 和 &lt;code dir="ltr" translate="no"&gt;targetSdk&lt;/code&gt; 自动停用 v1 签名。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 data-text="v2 签名" id="v2_signing"&gt;v2 签名&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;如果 &lt;code dir="ltr" translate="no"&gt;v2SigningEnabled&lt;/code&gt; 已显式启用，AGP 会执行 v2 应用签名。&lt;/li&gt;
&lt;li&gt;如果用户显式停用了 &lt;code dir="ltr" translate="no"&gt;v2SigningEnabled&lt;/code&gt;，v2 应用签名便不会执行。&lt;/li&gt;
&lt;li&gt;如果用户未显式启用 v2 签名，系统可能会根据 &lt;code dir="ltr" translate="no"&gt;targetSdk&lt;/code&gt; 自动停用 v2 签名。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些变更可让 AGP 根据用户是否已显式启用这些标志来停用相应签名机制，从而优化 build。在此版本之前，即使 &lt;code dir="ltr" translate="no"&gt;v1Signing&lt;/code&gt; 已获显式启用，也可能会被停用，这会使用户感到迷惑。&lt;/p&gt;
&lt;h4 data-text="移除了“feature”和“instantapp”Android Gradle 插件" id="feature_and_instantapp_android_gradle_plugins_removed"&gt;移除了 &lt;code dir="ltr" translate="no"&gt;feature&lt;/code&gt; 和 &lt;code dir="ltr" translate="no"&gt;instantapp&lt;/code&gt; Android Gradle 插件&lt;/h4&gt;
&lt;p&gt;Android Gradle 插件 3.6.0 废弃了功能插件 (&lt;code dir="ltr" translate="no"&gt;com.android.feature&lt;/code&gt;) 和免安装应用插件 (&lt;code dir="ltr" translate="no"&gt;com.android.instantapp&lt;/code&gt;)，改为使用动态功能插件 (&lt;code dir="ltr" translate="no"&gt;com.android.dynamic-feature&lt;/code&gt;)，以通过 &lt;a href="https://developer.android.com/guide/app-bundle?hl=zh-cn"&gt;Android App Bundle&lt;/a&gt; 构建和打包免安装应用。&lt;/p&gt;
&lt;p&gt;在 Android Gradle 插件 4.0.0 及更高版本中，完全移除了这些已废弃的插件。因此，如需使用最新的 Android Gradle 插件，您需要&lt;a href="https://developer.android.com/topic/google-play-instant/feature-module-migration?hl=zh-cn"&gt;迁移免安装应用以支持 Android App Bundle&lt;/a&gt;。通过迁移免安装应用，您可以利用 App Bundle 的优势，并&lt;a href="https://android-developers.googleblog.com/2019/04/google-play-instant-feature-plugin.html"&gt;简化应用的模块化设计&lt;/a&gt;。&lt;/p&gt;
&lt;aside class="note"&gt;&lt;strong&gt;注意&lt;/strong&gt;：&lt;span&gt;如需打开使用 Android Studio 4.0 及更高版本中已移除的插件的项目，项目必须使用 Android Gradle 插件 3.6.0 或更低版本。&lt;/span&gt;&lt;/aside&gt;
&lt;h4 data-text="移除了“分离注解处理”功能" id="separate-annotation-processing"&gt;移除了“分离注释处理”功能&lt;/h4&gt;
&lt;p&gt;移除了将注释处理分离到一项专门任务中的功能。此选项过去用于在纯 Java 项目中使用非增量注解处理器时维持增量 Java 编译；过去的启用方法是在 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中将 &lt;code dir="ltr" translate="no"&gt;android.enableSeparateAnnotationProcessing&lt;/code&gt; 设为 &lt;code dir="ltr" translate="no"&gt;true&lt;/code&gt;，但这种方法不再起作用。&lt;/p&gt;
&lt;p&gt;您应改为&lt;a href="https://developer.android.com/studio/build/optimize-your-build?hl=zh-cn#annotation_processors"&gt;使用增量注解处理器&lt;/a&gt;来提升构建性能。&lt;/p&gt;
&lt;h4 data-text="废弃了 includeCompileClasspath" id="includeCompileClasspath"&gt;废弃了 includeCompileClasspath&lt;/h4&gt;
&lt;p&gt;Android Gradle 插件不再检查或添加您在编译类路径上声明的注解处理器，并且 &lt;code dir="ltr" translate="no"&gt;annotationProcessorOptions.includeCompileClasspath&lt;/code&gt; DSL 属性不再有任何作用。如果您在编译类路径上添加注解处理器，可能会遇到以下错误：&lt;/p&gt;
&lt;pre class="devsite-click-to-copy" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;Error: Annotation processors must be explicitly declared now.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如需解决此问题，您必须在 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中使用 &lt;code dir="ltr" translate="no"&gt;annotationProcessor&lt;/code&gt; 依赖项配置添加注解处理器。如需了解详情，请参阅&lt;a href="https://developer.android.com/studio/build/dependencies?hl=zh-cn#annotation_processor"&gt;添加注释处理器&lt;/a&gt;。&lt;/p&gt;
&lt;h3 data-text="自动打包 CMake 使用的预构建依赖项" id="cmake-imported-targets"&gt;自动打包 CMake 使用的预构建依赖项&lt;/h3&gt;
&lt;p&gt;早期版本的 Android Gradle 插件要求您使用 &lt;code dir="ltr" translate="no"&gt;jniLibs&lt;/code&gt; 明确打包您的 CMake 外部原生 build 使用的所有预构建库。您的库可能位于模块的 &lt;code dir="ltr" translate="no"&gt;src/main/jniLibs&lt;/code&gt; 目录中，也可能位于在 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中配置的某个其他目录中：&lt;/p&gt;
&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;
sourceSets {
    main {
        // The libs directory contains prebuilt libraries that are used by the
        // app's library defined in CMakeLists.txt via an IMPORTED target.
        jniLibs.srcDirs = ['libs']
    }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;
sourceSets {
    main {
        // The libs directory contains prebuilt libraries that are used by the
        // app's library defined in CMakeLists.txt via an IMPORTED target.
        jniLibs.setSrcDirs(listOf("libs"))
    }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;有了 Android Gradle 插件 4.0，上述配置不再是必需的，并且会导致构建失败：&lt;/p&gt;
&lt;pre class="devsite-click-to-copy" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;* What went wrong:
Execution failed for task ':app:mergeDebugNativeLibs'.
&amp;gt; A failure occurred while executing com.android.build.gradle.internal.tasks.Workers$ActionFacade
   &amp;gt; More than one file was found with OS independent path 'lib/x86/libprebuilt.so'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;外部原生 build 现在会自动打包这些库，因此使用 &lt;code dir="ltr" translate="no"&gt;jniLibs&lt;/code&gt; 明确打包库会导致重复。为了避免构建错误，请将预构建库移至 &lt;code dir="ltr" translate="no"&gt;jniLibs&lt;/code&gt; 之外的位置，或从 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中移除 &lt;code dir="ltr" translate="no"&gt;jniLibs&lt;/code&gt; 配置。&lt;/p&gt;
&lt;h3 data-text="已知问题" id="4-0-0-issues"&gt;已知问题&lt;/h3&gt;
&lt;p&gt;本部分介绍 Android Gradle 插件 4.0.0 中存在的已知问题。&lt;/p&gt;
&lt;h4 data-text="Gradle 工作器机制中的竞态条件" id="race_condition_in_gradle_worker_mechanism"&gt;Gradle 工作器机制中的竞态条件&lt;/h4&gt;
&lt;p&gt;Android Gradle 插件 4.0 中的变更会在采用 &lt;code dir="ltr" translate="no"&gt;--no-daemon&lt;/code&gt; 配置运行的 Gradle 和 Gradle 6.3 或更低版本中触发一种竞态条件，导致 build 在完成后挂起。&lt;/p&gt;
&lt;p&gt;此问题将在 Gradle 6.4 中修复。&lt;/p&gt;
</description><author>Google</author><pubDate>2020-04-01 00:00:00</pubDate></item><item><title>3.6.0（2020 年 2 月）</title><link>https://developer.android.com/studio/releases/gradle-plugin?hl=zh-cn</link><description>
&lt;p&gt;此版本的 Android 插件需要使用以下工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.gradle.org/5.6.4/release-notes.html"&gt;Gradle 5.6.4&lt;/a&gt;。如需了解详情，请阅读有关&lt;a href="#updating-gradle"&gt;更新 Gradle&lt;/a&gt; 的部分。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.android.com/studio/releases/build-tools?hl=zh-cn#notes"&gt;SDK Build Tools 28.0.3&lt;/a&gt; 或更高版本。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="android-updates-box"&gt;
&lt;p&gt;&lt;b&gt;3.6.4（2020 年 7 月）&lt;a name="3.6.4"&gt;&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;a name="3.6.4"&gt;
&lt;/a&gt;&lt;p&gt;&lt;a name="3.6.4"&gt;
    本次要更新支持&lt;/a&gt;与 &lt;a href="https://developer.android.com/about/versions/11/privacy/package-visibility?hl=zh-cn"&gt;Android 11 中软件包可见性&lt;/a&gt;的新默认设置和功能兼容。
  &lt;/p&gt;
&lt;p&gt;
    如需了解详情，请参阅 &lt;a href="#4.0.1"&gt;4.0.1 版本说明&lt;/a&gt;。
  &lt;/p&gt;
&lt;/div&gt;
&lt;h3 data-text="新功能" id="3-6-0-new"&gt;新功能&lt;/h3&gt;
&lt;p&gt;此版本的 Android Gradle 插件包含以下新功能。&lt;/p&gt;
&lt;h4 data-text="视图绑定" id="view-binding"&gt;视图绑定&lt;/h4&gt;
&lt;p&gt;在代码中引用视图时，视图绑定可确保编译时安全性。您现在可以将 &lt;code dir="ltr" translate="no"&gt;findViewById()&lt;/code&gt; 替换为自动生成的绑定类引用。如需开始使用视图绑定，请在每个模块的 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中添加以下代码：&lt;/p&gt;
&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;

android {
    viewBinding.enabled = true
}
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;

android {
    viewBinding.enabled = true
}
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;如需了解详情，请阅读&lt;a href="https://developer.android.com/topic/libraries/view-binding?hl=zh-cn"&gt;视图绑定文档&lt;/a&gt;。&lt;/p&gt;
&lt;h4 data-text="支持 Maven Publish 插件" id="maven-publish"&gt;支持 Maven Publish 插件&lt;/h4&gt;
&lt;p&gt;Android Gradle 插件支持 &lt;a href="https://docs.gradle.org/current/userguide/publishing_maven.html"&gt;Maven Publish Gradle 插件&lt;/a&gt;，可让您将构建工件发布到 Apache Maven 制品库。Android Gradle 插件会为应用或库模块中的每个 build 变体工件创建一个&lt;a href="https://docs.gradle.org/current/userguide/dependency_management_terminology.html#sub:terminology_component"&gt;组件&lt;/a&gt;，您可以使用它来自定义要发布到 Maven 制品库的&lt;a href="https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:publications"&gt;发布内容&lt;/a&gt;。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;如需了解详情，请转到介绍如何&lt;a href="https://developer.android.com/studio/build/maven-publish-plugin?hl=zh-cn"&gt;使用 Maven Publish 插件&lt;/a&gt;的页面。&lt;/p&gt;
&lt;h4 data-text="新的默认打包工具" id="zipflinger"&gt;新的默认打包工具&lt;/h4&gt;
&lt;p&gt;在构建应用的调试版本时，该插件会使用一个新的打包工具 zipflinger 来构建 APK。&lt;em&gt;&lt;/em&gt;这一新工具应该能够提高构建速度。如果新的打包工具无法正常运行，请&lt;a href="https://developer.android.com/studio/report-bugs?hl=zh-cn"&gt;报告错误&lt;/a&gt;。您可以通过在 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中添加以下代码来恢复使用旧的打包工具：&lt;/p&gt;
&lt;pre class="devsite-click-to-copy" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;android.useNewApkCreator=false
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 data-text="原生构建属性" id="native-build-attribution"&gt;原生构建属性&lt;/h4&gt;
&lt;p&gt;您现在可以确定 Clang 构建和链接项目中的每个 C/C++ 文件所需的时间。Gradle 可以生成包含这些编译器事件时间戳的 Chrome 跟踪记录，以便您更好地了解构建项目所需的时间。如需生成此构建属性文件，请执行以下操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在运行 Gradle build 时添加标记 &lt;code dir="ltr" translate="no"&gt;-Pandroid.enableProfileJson=true&lt;/code&gt;。例如：&lt;/p&gt;
&lt;p&gt;&lt;code dir="ltr" translate="no"&gt;gradlew assembleDebug -Pandroid.enableProfileJson=true&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;打开 Chrome 浏览器，然后在搜索栏中输入 &lt;code dir="ltr" translate="no"&gt;chrome://tracing&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击 &lt;strong&gt;Load&lt;/strong&gt; 按钮并导航到 &lt;code dir="ltr" translate="no"&gt;&lt;var translate="no"&gt;project-root&lt;/var&gt;/build/android-profile&lt;/code&gt; 以查找文件。该文件的名称为 &lt;code dir="ltr" translate="no"&gt;profile-&lt;var translate="no"&gt;timestamp&lt;/var&gt;.json.gz&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;您可以在查看器顶部附近查看原生构建属性数据：&lt;/p&gt;
&lt;p&gt;&lt;img alt="Chrome 中的原生构建属性跟踪记录" class="screenshot" src="https://developer.android.com/static/studio/images/releases/native-build-attribution.png?hl=zh-cn" width="850px"/&gt; &lt;/p&gt;
&lt;h3 data-text="行为变更" id="3-6-0-behavior"&gt;行为变更&lt;/h3&gt;
&lt;p&gt;使用此版本的插件时，您可能会遇到以下行为方面的变更。&lt;/p&gt;
&lt;h4 data-text="默认情况下，原生库以未压缩的形式打包" id="extractNativeLibs"&gt;默认情况下，原生库以未压缩的形式打包&lt;/h4&gt;
&lt;p&gt;在构建应用时，插件现在默认会将 &lt;code dir="ltr" translate="no"&gt;extractNativeLibs&lt;/code&gt; 设置为 &lt;code dir="ltr" translate="no"&gt;"false"&lt;/code&gt;。也就是说，您的原生库将保持页面对齐状态并以未压缩的形式打包。虽然这样会增加上传大小，但您的用户会从以下优势中受益：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减小应用安装大小，因为平台可以直接从已安装的 APK 访问原生库，而无需创建库的副本。&lt;/li&gt;
&lt;li&gt;减小下载文件大小，因为在 APK 或 Android App Bundle 中添加未压缩的原生库通常可提高 Play 商店的压缩率。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果您希望 Android Gradle 插件改为打包压缩后的原生库，请在应用的清单中添加以下代码：&lt;/p&gt;
&lt;pre class="prettyprint lang-xml" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;&amp;lt;application
    android:extractNativeLibs="true"
    ... &amp;gt;
&amp;lt;/application&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;aside class="note"&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;span&gt;：&lt;code dir="ltr" translate="no"&gt;extractNativeLibs&lt;/code&gt; 清单属性已被 &lt;code dir="ltr" translate="no"&gt;useLegacyPackaging&lt;/code&gt; DSL 选项取代。如需了解详情，请参阅版本说明&lt;a href="#compress-native-libs-dsl"&gt;使用 DSL 打包压缩后的原生库&lt;/a&gt;。&lt;/span&gt;&lt;/aside&gt;&lt;h4 data-text="默认 NDK 版本" id="default-ndk-version"&gt;默认 NDK 版本&lt;/h4&gt;
&lt;p&gt;现在，如果您下载了多个版本的 NDK，Android Gradle 插件会选择一个默认版本来编译源代码文件。以前，该插件选择的是最新下载的 NDK 版本。使用模块的 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中的 &lt;code dir="ltr" translate="no"&gt;android.ndkVersion&lt;/code&gt; 属性可替换插件选择的默认版本。&lt;/p&gt;
&lt;h4 data-text="简化了 R 类的生成过程" id="simplified-r-class"&gt;简化了 R 类的生成过程&lt;/h4&gt;
&lt;p&gt;Android Gradle 插件通过仅为项目中的每个库模块生成一个 R 类并与其他模块依赖项共享这些 R 类，简化了编译类路径。这项优化应该会加快构建速度，但您需要注意以下事项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于编译器与上游模块依赖项共享 R 类，因此项目中的每个模块都必须使用独一无二的软件包名称。&lt;/li&gt;
&lt;li&gt;库的 R 类对其他项目依赖项的可见性取决于用于将库添加为依赖项的配置。例如，如果库 A 将库 B 添加为“api”依赖项，则库 A 和其他依赖于库 A 的库都可以访问库 B 的 R 类。不过，如果库 A 使用 &lt;code dir="ltr" translate="no"&gt;implementation&lt;/code&gt; 依赖项配置，其他库可能就无权访问库 B 的 R 类。如需了解详情，请参阅&lt;a href="https://developer.android.com/studio/build/dependencies?hl=zh-cn#dependency_configurations"&gt;依赖项配置&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 data-text="移除默认配置中缺少的资源" id="remove-non-default-resources"&gt;移除默认配置中缺少的资源&lt;/h4&gt;
&lt;p&gt;对于库模块，如果您添加了未包含在默认资源集内的语言资源（例如，将 &lt;code dir="ltr" translate="no"&gt;hello_world&lt;/code&gt; 作为字符串资源添加到 &lt;code dir="ltr" translate="no"&gt;/values-es/strings.xml&lt;/code&gt; 中，但未在 &lt;code dir="ltr" translate="no"&gt;/values/strings.xml&lt;/code&gt; 中定义该资源），Android Gradle 插件在编译项目时将不会再添加该资源。这种行为变更应该会减少 &lt;code dir="ltr" translate="no"&gt;Resource Not Found&lt;/code&gt; 运行时异常，并提高构建速度。&lt;/p&gt;
&lt;h4 data-text="D8 现在遵循注解的类保留政策" id="d8-class-retention-policy"&gt;D8 现在遵循注解的类保留政策&lt;/h4&gt;
&lt;p&gt;现在，在编译应用时，D8 会遵循注释应用的类保留政策，并且这些注释在运行时不再可用。将应用的目标 SDK 设置为 API 级别 23 时，也存在此行为；此前，在使用旧版本的 Android Gradle 插件和 D8 编译应用时，会允许在运行时访问这些注释。&lt;/p&gt;
&lt;h4 data-text="其他行为变更" id="3-6-0-other-behaviors"&gt;其他行为变更&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code dir="ltr" translate="no"&gt;aaptOptions.noCompress&lt;/code&gt; 在所有平台（针对 APK 和软件包）上都不再区分大小写，并且遵循使用大写字符的路径。&lt;/li&gt;
&lt;li&gt;现在，数据绑定默认为增量式。如需了解详情，请参阅&lt;a href="https://issuetracker.google.com/110061530?hl=zh-cn"&gt;问题 #110061530&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;现在，包括 Roboelectric 单元测试在内的所有单元测试都可以完全缓存。如需了解详情，请参阅&lt;a href="https://issuetracker.google.com/115873047?hl=zh-cn"&gt;问题 #115873047&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-text="bug 修复" id="3-6-0-fixes"&gt;问题修复&lt;/h3&gt;
&lt;p&gt;此版本的 Android Gradle 插件包含以下 bug 修复：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;现在，使用数据绑定的库模块支持 Robolectric 单元测试。如需了解详情，请参阅&lt;a href="https://issuetracker.google.com/126775542?hl=zh-cn"&gt;问题 #126775542&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;现在，您可在启用 Gradle 的&lt;a href="https://guides.gradle.org/performance/#parallel_execution"&gt;并行执行模式&lt;/a&gt;的情况下跨多个模块运行 &lt;code dir="ltr" translate="no"&gt;connectedAndroidTest&lt;/code&gt; 任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-text="已知问题" id="3-6-0-issues"&gt;已知问题&lt;/h3&gt;
&lt;p&gt;本部分介绍 Android Gradle 插件 3.6.0 中存在的已知问题。&lt;/p&gt;
&lt;h4 data-text="Android Lint 任务的执行速度过慢" id="3.6-ki-lint-performance"&gt;Android Lint 任务的执行速度过慢&lt;/h4&gt;
&lt;p&gt;Android Lint 由于解析基础架构性能降低，导致在某些代码构造中对 lambda 的推断类型的计算速度变慢，因此可能需要更长时间才能完成某些项目。&lt;/p&gt;
&lt;p&gt;此问题会报告为 &lt;a href="https://youtrack.jetbrains.com/issue/IDEA-229655"&gt;IDEA bug&lt;/a&gt;，并将在 Android Gradle 插件 4.0 中修复。&lt;/p&gt;
&lt;h4 data-text="缺少清单类" id="agp-missing-manifest"&gt;缺少清单类&lt;/h4&gt;
&lt;p&gt;如果您的应用在其清单中定义自定义权限，Android Gradle 插件通常会生成 &lt;code dir="ltr" translate="no"&gt;Manifest.java&lt;/code&gt; 类，用于以字符串常量的形式添加您的自定义权限。该插件会将此类与您的应用打包在一起，以便于您在运行时更轻松地引用这些权限。&lt;/p&gt;
&lt;p&gt;在 Android Gradle 插件 3.6.0 中无法生成清单类。如果您使用此版本的插件构建应用，并且该应用引用了清单类，您可能会看到 &lt;code dir="ltr" translate="no"&gt;ClassNotFoundException&lt;/code&gt; 异常。如需解决此问题，请执行以下某项操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过完全限定名称引用自定义权限。例如，&lt;code dir="ltr" translate="no"&gt;"com.example.myapp.permission.DEADLY_ACTIVITY"&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定义您自己的常量，如下所示：&lt;/p&gt;
&lt;pre class="prettyprint lang-java" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;public final class CustomPermissions {
  public static final class permission {
    public static final String DEADLY_ACTIVITY="com.example.myapp.permission.DEADLY_ACTIVITY";
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description><author>Google</author><pubDate>2020-02-01 00:00:00</pubDate></item><item><title>3.5.0（2019 年 8 月）</title><link>https://developer.android.com/studio/releases/gradle-plugin?hl=zh-cn</link><description>
&lt;p&gt;Android Gradle 插件 3.5.0 和 &lt;a href="https://developer.android.com/studio/releases?hl=zh-cn#3-5-0"&gt;Android Studio 3.5&lt;/a&gt; 是一个主要版本，同时也是 Project Marble 计划的成果，该计划主要围绕 Android 开发者工具的三大核心领域进行改进，分别是系统运行状况、功能完善和 bug 修复。值得注意的是，本次更新的重中之重是&lt;a href="https://medium.com/androiddevelopers/improving-build-speed-in-android-studio-3e1425274837"&gt;提高项目的构建速度&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如需详细了解这些更新以及其他 Project Marble 更新，请参阅 &lt;a href="https://android-developers.googleblog.com/2019/05/android-studio-35-beta.html"&gt;Android 开发者博文&lt;/a&gt;或以下几个部分。&lt;/p&gt;
&lt;p&gt;此版本的 Android 插件需要使用以下工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.gradle.org/5.4.1/release-notes.html"&gt;Gradle 5.4.1&lt;/a&gt;。如需了解详情，请阅读有关&lt;a href="#updating-gradle"&gt;更新 Gradle&lt;/a&gt; 的部分。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.android.com/studio/releases/build-tools?hl=zh-cn#notes"&gt;SDK Build Tools 28.0.3&lt;/a&gt; 或更高版本。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="android-updates-box"&gt;
&lt;p&gt;&lt;b&gt;3.5.4（2020 年 7 月）&lt;a name="3.5.4"&gt;&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;a name="3.5.4"&gt;
&lt;/a&gt;&lt;p&gt;&lt;a name="3.5.4"&gt;
    本次要更新支持&lt;/a&gt;与 &lt;a href="https://developer.android.com/about/versions/11/privacy/package-visibility?hl=zh-cn"&gt;Android 11 中软件包可见性&lt;/a&gt;的新默认设置和功能兼容。
  &lt;/p&gt;
&lt;p&gt;
    如需了解详情，请参阅 &lt;a href="#4.0.1"&gt;4.0.1 版本说明&lt;/a&gt;。
  &lt;/p&gt;
&lt;p&gt;&lt;b&gt;3.5.3（2019 年 12 月）&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
    本次要更新对 Android Studio 3.5.3 构成补充，修复了各种 bug 并做出了多项性能改进。
  &lt;/p&gt;
&lt;p&gt;&lt;b&gt;3.5.2（2019 年 11 月）&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
    本次要更新对 Android Studio 3.5.2 构成补充，修复了各种 bug 并做出了多项性能改进。如需查看重要 bug 修复列表，请阅读&lt;a href="https://androidstudio.googleblog.com/2019/11/android-studio-352-available.html"&gt;版本更新博客&lt;/a&gt;上的相关博文。
  &lt;/p&gt;
&lt;p&gt;&lt;b&gt;3.5.1（2019 年 10 月）&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
    本次要更新对 Android Studio 3.5.1 构成补充，修复了各种 bug 并做出了多项性能改进。如需查看重要 bug 修复列表，请阅读&lt;a href="https://androidstudio.googleblog.com/2019/10/android-studio-351-available.html"&gt;版本更新博客&lt;/a&gt;上的相关博文。
  &lt;/p&gt;
&lt;/div&gt;
&lt;h3 data-text="增量注解处理" id="incremental_ap"&gt;增量注解处理&lt;/h3&gt;
&lt;p&gt;如果您在 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中设置了 &lt;code dir="ltr" translate="no"&gt;android.databinding.incremental=true&lt;/code&gt;，&lt;a href="https://developer.android.com/reference/android/databinding/package-summary?hl=zh-cn"&gt;数据绑定&lt;/a&gt;注解处理器支持&lt;a href="https://docs.gradle.org/current/userguide/java_plugin.html#sec:incremental_annotation_processing"&gt;增量注解处理&lt;/a&gt;。这项优化提高了增量构建的性能。如需查看经过优化的注释处理器的完整列表，请参阅&lt;a href="https://docs.gradle.org/current/userguide/java_plugin.html#state_of_support_in_popular_annotation_processors"&gt;增量注释处理器&lt;/a&gt;表格。&lt;/p&gt;
&lt;p&gt;此外，KAPT 1.3.30 及更高版本也支持增量注释处理器，您可以通过在 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中添加 &lt;code dir="ltr" translate="no"&gt;kapt.incremental.apt=true&lt;/code&gt; 来启用此支持。&lt;/p&gt;
&lt;h3 data-text="可缓存的单元测试" id="cacheable_tests"&gt;可缓存的单元测试&lt;/h3&gt;
&lt;p&gt;通过将 &lt;a href="https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.TestOptions.UnitTestOptions.html#com.android.build.gradle.internal.dsl.TestOptions.UnitTestOptions:includeAndroidResources"&gt;&lt;code dir="ltr" translate="no"&gt;includeAndroidResources&lt;/code&gt;&lt;/a&gt; 设置为 &lt;code dir="ltr" translate="no"&gt;true&lt;/code&gt;，您可以允许单元测试使用 Android 资源、资产和清单，此时 Android Gradle 插件会生成包含绝对路径的测试配置文件，绝对路径会打破缓存可再定位性。您可以指示插件使用相对路径生成测试配置，以便通过在 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中添加以下代码来完全缓存 &lt;code dir="ltr" translate="no"&gt;AndroidUnitTest&lt;/code&gt; 任务：&lt;/p&gt;
&lt;pre class="devsite-click-to-copy" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;android.testConfig.useRelativePath = true
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 data-text="已知问题" id="known_issues_5"&gt;已知问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在使用 Kotlin Gradle 插件 1.3.31 或更早版本时，您可能会在构建或同步项目时看到以下警告：&lt;/p&gt;
&lt;pre class="devsite-click-to-copy" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;WARNING: API 'variant.getPackageLibrary()' is obsolete and has been replaced
         with 'variant.getPackageLibraryProvider()'.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如需解决&lt;a href="https://youtrack.jetbrains.com/issue/KT-30784"&gt;此问题&lt;/a&gt;，请将插件升级到 1.3.40 或更高版本。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description><author>Google</author><pubDate>2019-08-01 00:00:00</pubDate></item><item><title>3.4.0（2019 年 4 月）</title><link>https://developer.android.com/studio/releases/gradle-plugin?hl=zh-cn</link><description>
&lt;p&gt;此版本的 Android 插件需要使用以下工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.gradle.org/5.1.1/release-notes.html"&gt;Gradle 5.1.1&lt;/a&gt; 或更高版本。如需了解详情，请阅读有关&lt;a href="#updating-gradle"&gt;更新 Gradle&lt;/a&gt; 的部分。&lt;/p&gt;
&lt;aside class="note"&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;span&gt;：如果使用的是 Gradle 5.0 及更高版本，&lt;a href="https://docs.gradle.org/current/userguide/upgrading_version_4.html#rel5.0:default_memory_settings"&gt;默认的 Gradle 守护程序内存堆大小&lt;/a&gt;会从 1 GB 降到 512 MB。这可能会导致构建性能降低。如需替换此默认设置，请在项目的 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中&lt;a href="https://docs.gradle.org/current/userguide/build_environment.html#sec:configuring_jvm_memory"&gt;指定 Gradle 守护进程堆大小&lt;/a&gt;。&lt;/span&gt;&lt;/aside&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.android.com/studio/releases/build-tools?hl=zh-cn#notes"&gt;SDK Build Tools 28.0.3&lt;/a&gt; 或更高版本。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="android-updates-box"&gt;
&lt;p&gt;&lt;b&gt;3.4.3（2020 年 7 月）&lt;a name="3.4.3"&gt;&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;a name="3.4.3"&gt;
&lt;/a&gt;&lt;p&gt;&lt;a name="3.4.3"&gt;
    本次要更新支持&lt;/a&gt;与 &lt;a href="https://developer.android.com/about/versions/11/privacy/package-visibility?hl=zh-cn"&gt;Android 11 中软件包可见性&lt;/a&gt;的新默认设置和功能兼容。
  &lt;/p&gt;
&lt;p&gt;
    如需了解详情，请参阅 &lt;a href="#4.0.1"&gt;4.0.1 版本说明&lt;/a&gt;。
  &lt;/p&gt;
&lt;p&gt;&lt;b&gt;3.4.2（2019 年 7 月）&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
    本次要更新对 Android Studio 3.4.2 构成补充，修复了各种 bug 并做出了多项性能改进。如需查看重要 bug 修复列表，请阅读&lt;a href="https://androidstudio.googleblog.com/2019/07/android-studio-342-available.html"&gt;版本更新博客&lt;/a&gt;上的相关博文。
  &lt;/p&gt;
&lt;p&gt;&lt;b&gt;3.4.1（2019 年 5 月）&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
    本次要更新对 Android Studio 3.4.1 构成补充，修复了各种 bug 并做出了多项性能改进。如需查看重要 bug 修复列表，请阅读&lt;a href="https://androidstudio.googleblog.com/2019/05/android-studio-341-available.html"&gt;版本更新博客&lt;/a&gt;上的相关博文。
  &lt;/p&gt;
&lt;/div&gt;
&lt;h3 data-text="新功能" id="new_features_5"&gt;新功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;新的 lint 检查依赖项配置&lt;/strong&gt;：更改了 &lt;code dir="ltr" translate="no"&gt;lintChecks&lt;/code&gt; 的行为并引入了新的依赖项配置 &lt;code dir="ltr" translate="no"&gt;lintPublish&lt;/code&gt;，以便您可以更好地控制要将哪些 lint 检查打包到 Android 库中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code dir="ltr" translate="no"&gt;lintChecks&lt;/code&gt;：您应该将这个现有配置用于您想仅在本地构建项目时运行的 Lint 检查。您如果之前使用 &lt;code dir="ltr" translate="no"&gt;lintChecks&lt;/code&gt; 依赖项配置将 lint 检查包含在已发布的 AAR 中，需要迁移这些依赖项并改用新的 &lt;code dir="ltr" translate="no"&gt;lintPublish&lt;/code&gt; 配置（如下所述）。&lt;/li&gt;
&lt;li&gt;&lt;code dir="ltr" translate="no"&gt;lintPublish&lt;/code&gt;：针对您想要在已发布的 AAR 中包含的 lint 检查，在库项目中使用这个新配置（如下所示）。这意味着，使用库的项目也会应用那些 Lint 检查。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下代码示例在本地 Android 库项目中使用这两个依赖项配置。&lt;/p&gt;
&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;

dependencies {
// Executes lint checks from the ':lint' project at build time.
lintChecks project(':lint')
// Packages lint checks from the ':lintpublish' in the published AAR.
lintPublish project(':lintpublish')
}
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;

dependencies {
// Executes lint checks from the ':lint' project at build time.
lintChecks(project(":lint"))
// Packages lint checks from the ':lintpublish' in the published AAR.
lintPublish(project(":lintpublish"))
}
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一般来说，打包任务和为任务签名应该会加快整体构建速度。如果您发现与这些任务相关的性能退化，请&lt;a href="https://developer.android.com/studio/report-bugs?hl=zh-cn"&gt;报告错误&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-text="行为变更" id="behavior_changes_4"&gt;行为变更&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Android 免安装应用功能插件废弃警告&lt;/strong&gt;：如果您仍在使用 &lt;code dir="ltr" translate="no"&gt;com.android.feature&lt;/code&gt; 插件构建免安装应用，Android Gradle 插件 3.4.0 会向您发出废弃警告。为了确保您仍然可以在未来版本的插件上构建您的免安装应用，请迁移免安装应用，以使用&lt;a href="https://developer.android.com/studio/projects/dynamic-delivery?hl=zh-cn"&gt;动态功能插件&lt;/a&gt;，这样您还可以通过单个 Android App Bundle 发布安装版应用和免安装应用。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;R8 默认处于启用状态&lt;/strong&gt;：R8 将脱糖、压缩、混淆、优化和 dex 处理整合到了一个步骤中，从而&lt;a href="https://www.google.com/url?q=https%3A%2F%2Fandroid-developers.googleblog.com%2F2018%2F11%2Fr8-new-code-shrinker-from-google-is.html&amp;amp;%3Bsa=D&amp;amp;%3Bust=1551922493258000&amp;amp;%3Busg=AFQjCNH0N1wuMX645n7giw0wjikzjm3WCA&amp;amp;hl=zh-cn"&gt;显著提升了构建性能&lt;/a&gt;。R8 是在 Android Gradle 插件 3.3.0 中引入的，对于使用插件 3.4.0 及更高版本的应用和 Android 库项目，R8 现已默认处于启用状态。&lt;/p&gt;
&lt;p&gt;下图是 R8 引入之前的编译流程的简要概览。&lt;/p&gt;
&lt;p&gt;&lt;img alt="在 R8 之前，ProGuard 是一个与 dex 处理和脱糖不同的编译步骤。" src="https://developer.android.com/static/studio/images/build/r8/compile_with_d8_proguard.png?hl=zh-cn" width="855"/&gt;&lt;/p&gt;
&lt;p&gt;现在，有了 R8，可以在一个步骤中完成脱糖、压缩、混淆、优化和 dex 处理 (D8)，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img alt="有了 R8，可以在一个编译步骤中执行脱糖、压缩、混淆、优化和 dex 处理。" src="https://developer.android.com/static/studio/images/build/r8/compile_with_r8.png?hl=zh-cn" width="856"/&gt;&lt;/p&gt;
&lt;p&gt;请注意，R8 旨在与您现有的 ProGuard 规则配合使用，因此您可能不需要采取任何操作即可从 R8 中受益。但是，相对专为 Android 项目设计的 ProGuard 而言，R8 是一项不同的技术，因此压缩和优化可能会导致移除 ProGuard 可能没有的代码。因此，在这种情况（尽管不太可能发生）下，您可能需要添加其他规则，以在构建输出中保留这些代码。&lt;/p&gt;
&lt;p&gt;如果您在使用 R8 时遇到问题，请阅读 &lt;a href="https://r8.googlesource.com/r8/+/refs/heads/master/compatibility-faq.md"&gt;R8 兼容性常见问题解答&lt;/a&gt;一文，以检查是否有针对您的问题的解决方案。如果没有记录的解决方案，请&lt;a href="https://issuetracker.google.com/issues/new?component=326788&amp;amp;%3Btemplate=1025938&amp;amp;hl=zh-cn"&gt;报告错误&lt;/a&gt;。您可以停用 R8，只需将以下其中一行代码添加到项目的 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件即可：&lt;/p&gt;
&lt;pre class="devsite-click-to-copy" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;# Disables R8 for Android Library modules only.
android.enableR8.libraries = false
# Disables R8 for all modules.
android.enableR8 = false
&lt;/code&gt;&lt;/pre&gt;&lt;aside class="note"&gt;&lt;strong&gt;注意&lt;/strong&gt;：&lt;span&gt;对于指定构建类型，如果您在应用模块的 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中将 &lt;code dir="ltr" translate="no"&gt;useProguard&lt;/code&gt; 设为 &lt;code dir="ltr" translate="no"&gt;false&lt;/code&gt;，Android Gradle 插件会使用 R8 压缩该构建类型的应用代码，无论您是否在项目的 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中停用 R8 都是如此。&lt;/span&gt;&lt;/aside&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code dir="ltr" translate="no"&gt;ndkCompile&lt;/code&gt; 已废弃&lt;/strong&gt;：现在，如果您尝试使用 &lt;code dir="ltr" translate="no"&gt;ndkBuild&lt;/code&gt; 编译原生库，将会遇到构建错误。您应改用 CMake 或 ndk-build &lt;a href="https://developer.android.com/studio/projects/add-native-code?hl=zh-cn"&gt;将 C 和 C++ 代码添加到项目中&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-text="已知问题" id="known_issues_6"&gt;已知问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;虽然目前并未强制要求正确使用唯一软件包名称，但在以后的插件版本中这项要求会变得更为严格。在 Android Gradle 插件版本 3.4.0 上，您可以将下面这行代码添加到 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中，选择检查项目是否声明了可接受的软件包名称。&lt;/p&gt;
&lt;pre class="devsite-click-to-copy" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;android.uniquePackageNames = true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如需详细了解如何通过 Android Gradle 插件设置软件包名称，请参阅&lt;a href="https://developer.android.com/studio/build/configure-app-module?hl=zh-cn#set_the_application_id"&gt;设置应用 ID&lt;/a&gt; 一文。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description><author>Google</author><pubDate>2019-04-01 00:00:00</pubDate></item><item><title>3.3.0（2019 年 1 月）</title><link>https://developer.android.com/studio/releases/gradle-plugin?hl=zh-cn</link><description>
&lt;p&gt;此版本的 Android 插件需要使用以下工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.gradle.org/4.10.1/release-notes.html"&gt;Gradle 4.10.1&lt;/a&gt; 或更高版本。如需了解详情，请阅读有关&lt;a href="#updating-gradle"&gt;更新 Gradle&lt;/a&gt; 的部分。&lt;/p&gt;
&lt;aside class="note"&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;span&gt;：如果使用的是 Gradle 5.0 及更高版本，&lt;a href="https://docs.gradle.org/current/userguide/upgrading_version_4.html#rel5.0:default_memory_settings"&gt;默认的 Gradle 守护程序内存堆大小&lt;/a&gt;会从 1 GB 降到 512 MB。这可能会导致构建性能降低。如需替换此默认设置，请在项目的 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中&lt;a href="https://docs.gradle.org/current/userguide/build_environment.html#sec:configuring_jvm_memory"&gt;指定 Gradle 守护进程堆大小&lt;/a&gt;。&lt;/span&gt;&lt;/aside&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.android.com/studio/releases/build-tools?hl=zh-cn#notes"&gt;SDK Build Tools 28.0.3&lt;/a&gt; 或更高版本。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="android-updates-box"&gt;
&lt;p&gt;&lt;b&gt;3.3.3（2020 年 7 月）&lt;a name="3.3.3"&gt;&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;a name="3.3.3"&gt;
&lt;/a&gt;&lt;p&gt;&lt;a name="3.3.3"&gt;
    本次要更新支持&lt;/a&gt;与 &lt;a href="https://developer.android.com/about/versions/11/privacy/package-visibility?hl=zh-cn"&gt;Android 11 中软件包可见性&lt;/a&gt;的新默认设置和功能兼容。
  &lt;/p&gt;
&lt;p&gt;
    如需了解详情，请参阅 &lt;a href="#4.0.1"&gt;4.0.1 版本说明&lt;/a&gt;。
  &lt;/p&gt;
&lt;p&gt;&lt;b&gt;3.3.2（2019 年 3 月）&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
    本次要更新对 Android Studio 3.3.2 构成补充，修复了各种 bug 并做出了多项性能改进。如需查看重要 bug 修复列表，请阅读&lt;a href="https://androidstudio.googleblog.com/2019/03/android-studio-332-available.html"&gt;版本更新博客&lt;/a&gt;上的相关博文。
  &lt;/p&gt;
&lt;p&gt;&lt;b&gt;3.3.1（2019 年 2 月）&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;本次要更新对 Android Studio 3.3.1 构成补充，修复了各种 bug 并做出了多项性能改进。
&lt;/p&gt;&lt;/div&gt;
&lt;h3 data-text="新功能" id="new-features"&gt;新功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;改进了类路径同步&lt;/strong&gt;：在解析对运行时和编译时类路径的依赖项时，Android Gradle 插件会尝试解决出现在多个类路径中的依赖项的某些下游版本冲突问题。&lt;/p&gt;
&lt;p&gt;例如，如果运行时类路径包含库 A 版本 2.0，而编译类路径包含库 A 版本 1.0，则插件会自动将对编译类路径的依赖关系更新为库 A 版本 2.0，以避免错误。&lt;/p&gt;
&lt;p&gt;不过，如果运行时类路径包含库 A 版本 1.0，而编译类路径包含库 A 版本 2.0，则插件不会将编译类路径的依赖项降级为库 A 版本 1.0，并且您会遇到错误。如需了解详情，请参阅&lt;a href="https://developer.android.com/studio/build/dependencies?hl=zh-cn#classpath_conflicts"&gt;解决类路径之间的冲突问题&lt;/a&gt;部分。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;改进了使用注解处理器时的增量 Java 编译&lt;/strong&gt;：此更新改进了对使用注解处理器时的增量 Java 编译的支持，从而缩短了构建时间。&lt;/p&gt;
&lt;aside class="note"&gt;&lt;strong&gt;注意&lt;/strong&gt;：&lt;span&gt;此功能与 Gradle 4.10.1 及更高版本兼容；但由于 &lt;a href="https://github.com/gradle/gradle/issues/8194"&gt;Gradle 问题 8194&lt;/a&gt;，此功能与 Gradle 5.1 并不兼容。&lt;/span&gt;&lt;/aside&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;对于使用 Kapt 的项目（大多数仅使用 Kotlin 的项目和混合使用 Kotlin-Java 的项目）&lt;/strong&gt;：即使使用数据绑定或 retro-lambda 插件，也会启用增量 Java 编译。Kapt 任务进行的注解处理尚非增量处理。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;对于不使用 Kapt 的项目（仅使用 Java 的项目）&lt;/strong&gt;：如果您使用的注解处理器都支持&lt;a href="https://docs.gradle.org/4.10.1/userguide/java_plugin.html#sec:incremental_annotation_processing"&gt;增量注解处理&lt;/a&gt;，就会默认启用增量 Java 编译。如需监控增量注解处理器的采用情况，请查看 &lt;a href="https://github.com/gradle/gradle/issues/5277"&gt;Gradle 问题 5277&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;但是，如果有一个或多个注解处理器不支持增量构建，便不会启用增量 Java 编译。不过，您可以在 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中添加以下标记：&lt;/p&gt;
&lt;pre class="devsite-click-to-copy" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;android.enableSeparateAnnotationProcessing=true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;添加此标志后，Android Gradle 插件会在一个单独的任务中执行注解处理器，并允许 Java 编译任务以增量方式运行。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;使用过时 API 时显示更详细的调试消息&lt;/strong&gt;：现在，当插件检测到您使用的 API 已不再受支持时，会提供更详细的信息，以帮助您确定该 API 的使用位置。如需查看其他信息，您需要在项目的 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中添加以下代码：&lt;/p&gt;
&lt;pre class="devsite-click-to-copy" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;android.debug.obsoleteApi=true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;您还可以通过在命令行中传递 &lt;code dir="ltr" translate="no"&gt;-Pandroid.debug.obsoleteApi=true&lt;/code&gt; 来启用该标记。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;您可以从命令行对功能模块运行插桩测试。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-text="行为变更" id="behavior-changes"&gt;行为变更&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;延迟任务配置&lt;/strong&gt;：现在，插件会使用 &lt;a href="https://docs.gradle.org/current/userguide/task_configuration_avoidance.html"&gt;Gradle 的新任务创建 API&lt;/a&gt; 来避免初始化和配置完成当前编译不需要的任务（或执行任务图表上未列出的任务）。例如，如果您有多个 build 变体（如“发布”和“调试”build 变体），并且正在构建应用的“调试”版本，插件会避免初始化和配置应用“发布”版本的任务。&lt;/p&gt;
&lt;p&gt;如果调用 Variants API 中的某些旧方法（例如 &lt;code dir="ltr" translate="no"&gt;variant.getJavaCompile()&lt;/code&gt;），可能仍会强制执行任务配置。为了确保您的 build 会针对延迟任务配置进行优化，请调用返回 &lt;code dir="ltr" translate="no"&gt;&lt;a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/TaskProvider.html"&gt;TaskProvider&lt;/a&gt;&lt;/code&gt; 对象（例如 &lt;code dir="ltr" translate="no"&gt;variant.getJavaCompileProvider()&lt;/code&gt;）的新方法。&lt;/p&gt;
&lt;p&gt;如果您执行自定义编译任务，请了解如何&lt;a href="https://docs.gradle.org/current/userguide/task_configuration_avoidance.html#sec:old_vs_new_configuration_api_overview"&gt;适应 Gradle 的新任务创建 API&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于指定的编译类型，在设置 &lt;code dir="ltr" translate="no"&gt;useProguard false&lt;/code&gt; 时，插件现在会使用 R8（而不是 ProGuard）压缩和混淆应用的代码和资源。如需详细了解 R8，请阅读 Android 开发者博客上的&lt;a href="https://android-developers.googleblog.com/2018/11/r8-new-code-shrinker-from-google-is.html"&gt;这篇博文&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;为库项目更快地生成 R 类&lt;/strong&gt;：以前，Android Gradle 插件会为项目的每个依赖项生成一个 &lt;code dir="ltr" translate="no"&gt;R.java&lt;/code&gt; 文件，然后将这些 R 类和应用的其他类一起编译。现在，插件会直接生成包含应用的已编译 R 类的 JAR，而不会先编译中间的 &lt;code dir="ltr" translate="no"&gt;R.java&lt;/code&gt; 类。这项优化不仅可以显著提升包含多个库子项目和依赖项的项目的编译性能，还可以加快在 Android Studio 中编制索引的速度。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;构建 &lt;a href="https://developer.android.com/guide/app-bundle?hl=zh-cn"&gt;Android App Bundle&lt;/a&gt; 时，由以 Android 6.0（API 级别 23）或更高版本为目标平台的 app bundle 生成的 APK 现在默认包含原生库的未压缩版本。这项优化无需设备创建库的副本，因此减少了应用占用的存储空间。如果您想要停用此优化，请在 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中添加以下代码：&lt;/p&gt;
&lt;pre class="devsite-click-to-copy" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;android.bundle.enableUncompressedNativeLibs = false
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;插件会强制实施某些第三方插件的最低版本。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;单变体项目同步&lt;/strong&gt;：&lt;a href="https://developer.android.com/studio/build?hl=zh-cn#sync-files"&gt;将项目与 build 配置同步&lt;/a&gt;是让 Android Studio 了解项目结构的重要步骤。不过，对于大型项目，此过程可能非常耗时。如果您的项目使用了多个 build 变体，那么您现在可以限定仅同步当前所选的变体，从而优化项目同步操作。&lt;/p&gt;
&lt;p&gt;您需要结合使用 Android Studio 3.3 或更高版本与 Android Gradle 插件 3.3.0 或更高版本，才能启用此优化。满足这些要求后，Android Studio 会在您同步项目时提示您启用此优化。默认情况下，新项目也会启用此优化。&lt;/p&gt;
&lt;p&gt;如需手动启用此优化功能，请依次点击 &lt;strong&gt;File &amp;gt; Settings &amp;gt; Experimental&lt;/strong&gt; &lt;strong&gt;&amp;gt; Gradle&lt;/strong&gt;（在 Mac 上，则依次点击 &lt;strong&gt;Android Studio &amp;gt; Preferences &amp;gt; Experimental &amp;gt; Gradle&lt;/strong&gt;），然后选中 &lt;strong&gt;Only sync the active variant&lt;/strong&gt; 复选框。&lt;/p&gt;
&lt;p class="note"&gt;&lt;b&gt;注意&lt;/b&gt;：此优化完全支持包含 Java 和 C++ 语言的项目，部分支持包含 Kotlin 语言的项目。在为包含 Kotlin 内容的项目启用此优化时，Gradle 同步会回退到在内部使用完整的变体。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;自动下载缺失的 SDK 软件包&lt;/strong&gt;：此功能已经过扩展，可支持 NDK。如需了解详情，请阅读 &lt;a href="https://developer.android.com/studio/intro/update?hl=zh-cn#download-with-gradle"&gt;Gradle 自动下载缺失软件包&lt;/a&gt;部分。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-text="bug 修复" id="bug-fixes"&gt;问题修复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Android Gradle 插件 3.3.0 修复了以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尽管启用了 Jetifier，但构建流程调用的是 &lt;code dir="ltr" translate="no"&gt;android.support.v8.renderscript.RenderScript&lt;/code&gt;，而不是 AndroidX 版本&lt;/li&gt;
&lt;li&gt;由于以下原因引起的冲突：&lt;code dir="ltr" translate="no"&gt;androidx-rs.jar&lt;/code&gt; 包含静态绑定的 &lt;code dir="ltr" translate="no"&gt;annotation.AnyRes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用 RenderScript 时，不必再在 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中手动设置 Build Tools 版本&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description><author>Google</author><pubDate>2019-01-01 00:00:00</pubDate></item><item><title>3.2.0（2018 年 9 月）</title><link>https://developer.android.com/studio/releases/gradle-plugin?hl=zh-cn</link><description>
&lt;p&gt;此版本的 Android 插件需要使用以下工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.gradle.org/4.6/release-notes.html"&gt;Gradle 4.6&lt;/a&gt; 或更高版本。如需了解详情，请阅读有关&lt;a href="#updating-gradle"&gt;更新 Gradle&lt;/a&gt; 的部分。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.android.com/studio/releases/build-tools?hl=zh-cn#notes"&gt;SDK Build Tools 28.0.3&lt;/a&gt; 或更高版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="android-updates-box"&gt;
&lt;p&gt;&lt;b&gt;3.2.1（2018 年 10 月）&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;通过此次更新，您无需再为 SDK Build Tools 指定版本。Android Gradle 插件现在默认使用版本 28.0.3。
  &lt;/p&gt;
&lt;/div&gt;
&lt;h3 data-text="新功能" id="new-features_1"&gt;新功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;支持构建 Android App Bundle&lt;/strong&gt;：App Bundle 是一种全新的上传格式，其中包含应用的所有经过编译的代码和资源，但 APK 生成及签名工作则由 Google Play 商店完成。您无需再构建、签署和管理多个 APK，而用户也可以获得更小且已针对其设备优化的下载内容。如需了解详情，请阅读 &lt;a href="https://developer.android.com/guide/app-bundle?hl=zh-cn"&gt;Android App Bundle 简介&lt;/a&gt;一文。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;支持在使用注解处理器时加快增量构建速度&lt;/strong&gt;：&lt;a href="https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.AnnotationProcessorOptions.html"&gt;&lt;code dir="ltr" translate="no"&gt;AnnotationProcessorOptions&lt;/code&gt;&lt;/a&gt; DSL 现在会扩展 &lt;a href="https://docs.gradle.org/current/javadoc/org/gradle/process/CommandLineArgumentProvider.html"&gt;&lt;code dir="ltr" translate="no"&gt;CommandLineArgumentProvider&lt;/code&gt;&lt;/a&gt;，这可让您或注解处理器创建者使用&lt;a href="https://docs.gradle.org/current/userguide/more_about_tasks.html#sec:up_to_date_checks"&gt;增量构建属性类型注解&lt;/a&gt;来注解处理器的参数。使用这些注解可提高增量和缓存整洁 build 的正确性和性能。如需了解详情，请阅读&lt;a href="https://developer.android.com/studio/build/dependencies?hl=zh-cn#processor-arguments"&gt;向注释处理器传递参数&lt;/a&gt;部分。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;适用于 AndroidX 的迁移工具&lt;/strong&gt;：在搭配使用 Android Gradle 插件 3.2.0 与 Android 3.2 及更高版本时，您可迁移项目的本地依赖项和 Maven 依赖项，以使用新的 AndroidX 库，方法是从菜单栏中依次选择 &lt;strong&gt;Refactor &amp;gt; Migrate to AndroidX&lt;/strong&gt;。使用此迁移工具还会在 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中将以下标记设置为 &lt;code dir="ltr" translate="no"&gt;true&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code dir="ltr" translate="no"&gt;android.useAndroidX&lt;/code&gt;&lt;/strong&gt;：如果设置为 &lt;code dir="ltr" translate="no"&gt;true&lt;/code&gt;，Android 插件会使用对应的 AndroidX 库，而非支持库。如未指定此标记，该插件会默认将其设置为 &lt;code dir="ltr" translate="no"&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code dir="ltr" translate="no"&gt;android.enableJetifier&lt;/code&gt;&lt;/strong&gt;：如果设置为 &lt;code dir="ltr" translate="no"&gt;true&lt;/code&gt;，Android 插件会通过重写其二进制文件来自动迁移现有的第三方库，以使用 AndroidX。如未指定此标记，该插件会默认将其设置为 &lt;code dir="ltr" translate="no"&gt;false&lt;/code&gt;。只有在 &lt;code dir="ltr" translate="no"&gt;android.useAndroidX&lt;/code&gt; 也被设置为 &lt;code dir="ltr" translate="no"&gt;true&lt;/code&gt; 时，您才能将此标记设置为 &lt;code dir="ltr" translate="no"&gt;true&lt;/code&gt;，否则会遇到构建错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如需了解详情，请参阅 &lt;a href="https://developer.android.com/topic/libraries/support-library/androidx-overview?hl=zh-cn"&gt;AndroidX 概览&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;新的代码缩减器 R8&lt;/strong&gt;：R8 是一种执行代码缩减和混淆的新工具，替代了 ProGuard。您只需将以下代码添加到项目的 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中，即可开始使用 R8 的预览版本：&lt;/p&gt;
&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;

android.enableR8 = true
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;

android.enableR8 = true
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-text="行为变更" id="behavior-changes_1"&gt;行为变更&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用 D8 进行脱糖的功能现已默认处于启用状态。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AAPT2 现在位于 Google 的 Maven 代码库中。如需使用 AAPT2，请确保您的 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中包含 &lt;code dir="ltr" translate="no"&gt;google()&lt;/code&gt; 依赖项，如下所示：&lt;/p&gt;
&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;

buildscript {
    repositories {
        google() // here
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.0'
    }
}
allprojects {
    repositories {
        google() // and here
        jcenter()
}
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;

buildscript {
    repositories {
        google() // here
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.0'
    }
}
allprojects {
    repositories {
        google() // and here
        jcenter()
}
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;原生 MultiDex 现已默认处于启用状态。以前版本的 Android Studio 会在将应用的调试版本部署到搭载 Android API 级别 21 或更高级别的设备时启用原生多 dex 处理。现在，无论您是要部署到设备，还是要编译 APK 以供发布，Android Gradle 插件都会针对所有设置为 &lt;code dir="ltr" translate="no"&gt;minSdkVersion=21&lt;/code&gt;（或更高版本）的模块启用原生多 dex 处理。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;该插件现在会强制执行最低版本的 protobuf 插件 (0.8.6)、Kotlin 插件 (1.2.50) 和 Crashlytics 插件 (1.25.4)。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在指定模块名称时，功能模块插件 &lt;code dir="ltr" translate="no"&gt;com.android.feature&lt;/code&gt; 现在强制要求仅使用字母、数字和下划线。例如，如果功能模块名称包含短划线，您会遇到构建错误。此行为与动态功能插件的行为相符。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-text="bug 修复" id="bug-fixes_1"&gt;问题修复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JavaCompile 现在可以在具有数据绑定的项目中缓存。（&lt;a href="https://issuetracker.google.com/69243050?hl=zh-cn"&gt;问题 #69243050&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;为启用了数据绑定的库模块提供更好的避免编译功能。（&lt;a href="https://issuetracker.google.com/77539932?hl=zh-cn"&gt;问题 #77539932&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;如果您因为一些不可预知的构建错误而在早期版本中停用了&lt;a href="https://docs.gradle.org/current/userguide/multi_project_builds.html#sec:configuration_on_demand"&gt;按需配置&lt;/a&gt;，现在可以重新启用。（&lt;a href="https://issuetracker.google.com/77910727?hl=zh-cn"&gt;问题 77910727&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
</description><author>Google</author><pubDate>2018-09-01 00:00:00</pubDate></item><item><title>3.1.0（2018 年 3 月）</title><link>https://developer.android.com/studio/releases/gradle-plugin?hl=zh-cn</link><description>
&lt;p&gt;此版本的 Android 插件需要使用以下工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.gradle.org/current/release-notes.html"&gt;Gradle 4.4&lt;/a&gt; 或更高版本。如需了解详情，请阅读有关&lt;a href="#updating-gradle"&gt;更新 Gradle&lt;/a&gt; 的部分。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.android.com/studio/releases/build-tools?hl=zh-cn#notes"&gt;Build Tools 27.0.3&lt;/a&gt; 或更高版本。请注意，您不必再使用 &lt;code dir="ltr" translate="no"&gt;android.buildToolsVersion&lt;/code&gt; 属性指定 Build Tools 的版本。默认情况下，该插件会使用所需的最低版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class="hide-from-toc" data-text="新的 DEX 编译器 (D8)" id="D8"&gt;新的 DEX 编译器 (D8)&lt;/h3&gt;
&lt;p&gt;默认情况下，Android Studio 现在会使用名为 D8 的新 DEX 编译器。DEX 编译是指针对 Android 运行时（对于较早版本的 Android，则针对 Dalvik）将 &lt;code dir="ltr" translate="no"&gt;.class&lt;/code&gt; 字节码转换为 &lt;code dir="ltr" translate="no"&gt;.dex&lt;/code&gt; 字节码的过程。与之前的编译器（称为 DX）相比，D8 的编译速度更快，输出的 DEX 文件更小，同时却能保持相同甚至更出色的应用运行时性能。&lt;/p&gt;
&lt;p&gt;D8 应该不会改变您的日常应用开发工作流程。但是，如果您遇到与新编译器有关的任何问题，请&lt;a href="https://developer.android.com/studio/report-bugs?hl=zh-cn"&gt;报告错误&lt;/a&gt;。您可以在项目的 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中添加以下代码，暂时停用 D8 并使用 DX：&lt;/p&gt;
&lt;pre class="prettyprint" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;android.enableD8=false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于&lt;a href="https://developer.android.com/studio/write/java8-support?hl=zh-cn"&gt;使用 Java 8 语言功能&lt;/a&gt;的项目，系统会默认启用增量脱糖。您可以在项目的 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中添加以下代码，停用增量脱糖：&lt;/p&gt;
&lt;pre class="prettyprint" dir="ltr" translate="no"&gt;&lt;code dir="ltr" translate="no"&gt;android.enableIncrementalDesugaring=false.
&lt;/code&gt;&lt;/pre&gt;
&lt;p class="caution"&gt;
&lt;b&gt;预览版用户&lt;/b&gt;：如果您已在使用预览版 D8，则请注意，D8 现在会针对 &lt;a href="https://developer.android.com/studio/releases/build-tools?hl=zh-cn"&gt;SDK Build Tools&lt;/a&gt;（而非 JDK）中包含的库进行编译。因此，如果您访问的 API 存在于 JDK 而非 SDK Build Tools 库中，您会遇到编译错误。
&lt;/p&gt;
&lt;h3 class="hide-from-toc" data-text="行为变更" id="behavior_changes"&gt;行为变更&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在构建分别以不同 ABI 为目标的多个 APK 时，默认情况下，插件不会再针对以下 ABI 生成 APK：&lt;code dir="ltr" translate="no"&gt;mips&lt;/code&gt;、&lt;code dir="ltr" translate="no"&gt;mips64&lt;/code&gt; 和 &lt;code dir="ltr" translate="no"&gt;armeabi&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果您想构建以上述 ABI 为目标的 APK，必须使用 &lt;a href="https://developer.android.com/ndk/downloads/revision_history?hl=zh-cn"&gt;NDK r16b 或更低版本&lt;/a&gt;，并在 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中指定这些 ABI，如下所示：&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;
  splits {
      abi {
          include &lt;b&gt;'armeabi', 'mips', 'mips64'&lt;/b&gt;
          ...
      }
  }
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;
  splits {
      abi {
          include(&lt;b&gt;"armeabi", "mips", "mips64"&lt;/b&gt;)
          ...
      }
  }
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;现在，Android 插件的&lt;a href="https://developer.android.com/studio/build/build-cache?hl=zh-cn"&gt;构建缓存&lt;/a&gt;会排除超过 30 天的缓存条目。&lt;/li&gt;
&lt;li&gt;将 &lt;code dir="ltr" translate="no"&gt;"auto"&lt;/code&gt; 传递给 &lt;a href="https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.ProductFlavor.html#com.android.build.gradle.internal.dsl.ProductFlavor:resConfig(java.lang.String)"&gt;&lt;code dir="ltr" translate="no"&gt;resConfig&lt;/code&gt;&lt;/a&gt; 不会再自动选择要打包到 APK 中的字符串资源。如果继续使用 &lt;code dir="ltr" translate="no"&gt;"auto"&lt;/code&gt;，该插件会打包应用及其依赖项提供的所有字符串资源。因此，您应该指定希望插件打包到 APK 中的各个语言区域。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由于本地模块不能依赖应用的测试 APK，因此使用 &lt;code dir="ltr" translate="no"&gt;androidTestApi&lt;/code&gt; 配置（而非 &lt;code dir="ltr" translate="no"&gt;androidTestImplementation&lt;/code&gt;）将依赖项添加到插桩测试中会导致 Gradle 发出以下警告：&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;&lt;p&gt;&lt;/p&gt;

&lt;p&gt;WARNING: Configuration 'androidTestApi' is obsolete
  and has been replaced with 'androidTestImplementation'
  &lt;/p&gt;&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;&lt;p&gt;&lt;/p&gt;

&lt;p&gt;WARNING: Configuration 'androidTestApi' is obsolete
  and has been replaced with 'androidTestImplementation'
  &lt;/p&gt;&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class="hide-from-toc" data-text="修复" id="fixes"&gt;修复&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修复了 Android Studio 无法正确识别复合构建中的依赖项问题。&lt;/li&gt;
&lt;li&gt;修复了以下问题：如果在进行单次构建时多次加载 Android 插件（例如，有多个子项目，并且每个子项目的构建脚本类路径中都包含 Android 插件），您会遇到项目同步错误。&lt;/li&gt;
&lt;/ul&gt;
</description><author>Google</author><pubDate>2018-03-01 00:00:00</pubDate></item><item><title>3.0.0（2017 年 10 月）</title><link>https://developer.android.com/studio/releases/gradle-plugin?hl=zh-cn</link><description>
&lt;p&gt;Android Gradle 插件 3.0.0 包含各种旨在解决大型项目性能问题的更改。&lt;/p&gt;
&lt;p&gt;例如，在一个具有大约 130 个模块和大量外部依赖项但没有代码或资源的&lt;a href="https://github.com/jmslau/perf-android-large.git"&gt;示例框架项目&lt;/a&gt;上，您可以体验到与以下类似的性能提升：&lt;/p&gt;
&lt;div class="full-width-nav-aware"&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Android 插件版本 + Gradle 版本&lt;/th&gt;
&lt;th&gt;Android 插件 2.2.0 + Gradle 2.14.1&lt;/th&gt;
&lt;th&gt;Android 插件 2.3.0 + Gradle 3.3&lt;/th&gt;
&lt;th&gt;Android 插件 3.0.0 + Gradle 4.1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;配置（例如，运行 &lt;code dir="ltr" translate="no"&gt;./gradlew --help&lt;/code&gt;）&lt;/th&gt;
&lt;td&gt;大约 2 分钟&lt;/td&gt;
&lt;td&gt;大约 9 秒&lt;/td&gt;
&lt;td&gt;大约 2.5 秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;1 行 Java 更改（实现更改）&lt;/th&gt;
&lt;td&gt;大约 2 分 15 秒&lt;/td&gt;
&lt;td&gt;大约 29 秒&lt;/td&gt;
&lt;td&gt;大约 6.4 秒&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;其中某些更改会让现有 build 出现异常。因此，您应该考虑在使用新插件之前迁移您的项目。&lt;/p&gt;
&lt;p&gt;如果您没有体验到上述性能提升，请&lt;a href="https://issuetracker.google.com/issues/new?component=192708&amp;amp;%3Btemplate=840533&amp;amp;hl=zh-cn"&gt;提交错误&lt;/a&gt;并使用 &lt;a href="https://github.com/gradle/gradle-profiler"&gt;Gradle 性能剖析器&lt;/a&gt;添加 build 的跟踪记录。&lt;/p&gt;
&lt;p&gt;此版本的 Android 插件需要使用以下工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.gradle.org/current/release-notes.html"&gt;Gradle 4.1&lt;/a&gt; 或更高版本。如需了解详情，请阅读有关&lt;a href="#updating-gradle"&gt;更新 Gradle&lt;/a&gt; 的部分。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.android.com/studio/releases/build-tools?hl=zh-cn#notes"&gt;Build Tools 26.0.2&lt;/a&gt; 或更高版本。经过此次更新，您无需再指定 Build Tools 的版本。默认情况下，该插件会使用所需的最低版本。因此，您现在可以移除 &lt;code dir="ltr" translate="no"&gt;android.buildToolsVersion&lt;/code&gt; 属性了。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="android-updates-box"&gt;
&lt;p&gt;
&lt;b&gt;3.0.1（2017 年 11 月）&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;
    本次要更新支持 Android Studio 3.0.1，修复了各种 bug 并做出了多项性能改进。
&lt;/p&gt;&lt;/div&gt;
&lt;h3 data-text="优化" id="optimizations"&gt;优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;通过精细控制的任务图提升了多模块项目的并行性。&lt;/li&gt;
&lt;li&gt;更改依赖项时，Gradle 通过不重新编译无法访问该依赖项 API 的模块来加快构建速度。您应&lt;a href="https://developer.android.com/studio/build/dependencies?hl=zh-cn#dependency_configurations"&gt;利用 Gradle 的新依赖项配置&lt;/a&gt;（&lt;code dir="ltr" translate="no"&gt;implementation&lt;/code&gt;、&lt;code dir="ltr" translate="no"&gt;api&lt;/code&gt;、&lt;code dir="ltr" translate="no"&gt;compileOnly&lt;/code&gt; 和 &lt;code dir="ltr" translate="no"&gt;runtimeOnly&lt;/code&gt;）限制哪些依赖项会将其 API 泄露给其他模块。&lt;/li&gt;
&lt;li&gt;借助每个类的 dex 处理，可加快增量构建速度。每个类现在都会编译成单独的 DEX 文件，并且只会对修改过的类重新进行 dex 处理。对于将 &lt;code dir="ltr" translate="no"&gt;minSdkVersion&lt;/code&gt; 设置为 20（或更低数值）并使用&lt;a href="https://developer.android.com/studio/build/multidex?hl=zh-cn#mdex-pre-l"&gt;旧版多 dex 处理&lt;/a&gt;的应用，编译速度应该也会得到改善。&lt;/li&gt;
&lt;li&gt;通过优化某些任务来使用缓存的输出，从而加快构建速度。如需利用此项优化，您需要先&lt;a href="https://docs.gradle.org/current/userguide/build_cache.html#sec:build_cache_enable"&gt;启用 Gradle 构建缓存&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;使用 AAPT2（现已默认处于启用状态）改进了增量资源处理。如果您在使用 AAPT2 时遇到问题，请&lt;a href="https://developer.android.com/studio/report-bugs?hl=zh-cn"&gt;报告错误&lt;/a&gt;。您也可以停用 AAPT2，方法是在 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中设置 &lt;code dir="ltr" translate="no"&gt;android.enableAapt2=false&lt;/code&gt;，然后通过在命令行中运行 &lt;code dir="ltr" translate="no"&gt;./gradlew --stop&lt;/code&gt; 来重启 Gradle 守护进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 data-text="新功能" id="new_features"&gt;新功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.android.com/studio/build/build-variants?hl=zh-cn#variant_aware"&gt;变体感知依赖项管理&lt;/a&gt;。现在，在构建某个模块的特定变体时，插件会自动将本地库模块依赖项的变体与您正在构建的模块变体进行匹配。&lt;/li&gt;
&lt;li&gt;加入了新的功能模块插件，以支持 &lt;a href="https://developer.android.com/topic/instant-apps?hl=zh-cn"&gt;Android 免安装应用&lt;/a&gt;和 Android 免安装应用 SDK（您可以&lt;a href="https://developer.android.com/studio/intro/update?hl=zh-cn#sdk-manager"&gt;使用 SDK 管理器&lt;/a&gt;下载）。如需详细了解如何使用新插件创建功能模块，请参阅&lt;a href="https://developer.android.com/topic/instant-apps/getting-started/structure?hl=zh-cn#structure_of_an_instant_app_with_multiple_features"&gt;包含多个功能的免安装应用的结构&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;对使用某些 Java 8 语言功能和 Java 8 库提供内置支持。&lt;strong&gt;Jack 现已废弃且无需再使用&lt;/strong&gt;，您应先停用 Jack，才能使用默认工具链内置的已改进 Java 8 支持。有关详情，请阅读&lt;a href="https://developer.android.com/studio/write/java8-support?hl=zh-cn"&gt;使用 Java 8 语言功能&lt;/a&gt;一文。&lt;/li&gt;
&lt;li&gt;添加了对使用 &lt;a href="https://developer.android.com/training/testing/junit-runner?hl=zh-cn#using-android-test-orchestrator"&gt;Android Test Orchestrator&lt;/a&gt; 运行测试的支持，可让您在测试自己的 &lt;code dir="ltr" translate="no"&gt;&lt;a href="https://developer.android.com/reference/android/app/Instrumentation?hl=zh-cn"&gt;Instrumentation&lt;/a&gt;&lt;/code&gt; 调用中运行每一项应用测试。因为每个测试都是在自己的 &lt;code dir="ltr" translate="no"&gt;&lt;a href="https://developer.android.com/reference/android/app/Instrumentation?hl=zh-cn"&gt;Instrumentation&lt;/a&gt;&lt;/code&gt; 实例中运行，所以测试之间的共享状态也不会在设备的 CPU 或内存上累积。而且，即使有一个测试崩溃了，也只会破坏它自己的 &lt;code dir="ltr" translate="no"&gt;&lt;a href="https://developer.android.com/reference/android/app/Instrumentation?hl=zh-cn"&gt;Instrumentation&lt;/a&gt;&lt;/code&gt; 实例，而其他测试仍会正常运行。
&lt;ul&gt;
&lt;li&gt;添加了 &lt;code dir="ltr" translate="no"&gt;testOptions.execution&lt;/code&gt;，以确定是否使用设备上的测试编排。如果您想&lt;a href="https://developer.android.com/training/testing/junit-runner?hl=zh-cn#using-android-test-orchestrator"&gt;使用 Android Test Orchestrator&lt;/a&gt;，则需要指定 &lt;code dir="ltr" translate="no"&gt;ANDROID_TEST_ORCHESTRATOR&lt;/code&gt;（如下所示）。默认情况下，此属性会设置为 &lt;code dir="ltr" translate="no"&gt;HOST&lt;/code&gt;，这会停用设备上的编配，并且是运行测试的标准方法。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;
android {
  testOptions {
    execution 'ANDROID_TEST_ORCHESTRATOR'
  }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;
android {
  testOptions {
    execution = "ANDROID_TEST_ORCHESTRATOR"
  }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;新的 &lt;code dir="ltr" translate="no"&gt;androidTestUtil&lt;/code&gt; 依赖项配置允许您在运行插桩测试（例如 Android Test Orchestrator）之前安装其他测试辅助程序 APK：&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;
dependencies {
  androidTestUtil 'com.android.support.test:orchestrator:1.0.0'
  ...
}
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;
dependencies {
  androidTestUtil("com.android.support.test:orchestrator:1.0.0")
  ...
}
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;添加了 &lt;code dir="ltr" translate="no"&gt;testOptions.unitTests.includeAndroidResources&lt;/code&gt;，以支持需要 Android 资源（例如 &lt;a href="http://robolectric.org/"&gt;Roboelectric&lt;/a&gt;）的单元测试。如果您将此属性设置为 &lt;code dir="ltr" translate="no"&gt;true&lt;/code&gt;，插件便会在运行单元测试之前执行资源、资产和清单合并。然后，测试便会检查 &lt;code dir="ltr" translate="no"&gt;com/android/tools/test_config.properties&lt;/code&gt; 的类路径是否具有以下键：
&lt;ul&gt;
&lt;li&gt;&lt;code dir="ltr" translate="no"&gt;android_merged_assets&lt;/code&gt;：已合并资产目录的绝对路径。
&lt;p class="note"&gt;
&lt;b&gt;注意&lt;/b&gt;：对于库模块，已合并资产不会包含依赖项的资产（详见&lt;a href="https://issuetracker.google.com/65550419?hl=zh-cn"&gt;问题 #65550419&lt;/a&gt;）。
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;code dir="ltr" translate="no"&gt;android_merged_manifest&lt;/code&gt;：已合并清单文件的绝对路径。&lt;/li&gt;
&lt;li&gt;&lt;code dir="ltr" translate="no"&gt;android_merged_resources&lt;/code&gt;：已合并资源目录的绝对路径，其中包含模块中的所有资源以及模块的所有依赖项。&lt;/li&gt;
&lt;li&gt;&lt;code dir="ltr" translate="no"&gt;android_custom_package&lt;/code&gt;：最终 R 类的软件包名称。如果动态修改应用 ID，则此软件包名称可能与应用清单中的 &lt;code dir="ltr" translate="no"&gt;package&lt;/code&gt; 属性不匹配。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;支持&lt;a href="https://developer.android.com/guide/topics/ui/look-and-feel/fonts-in-xml?hl=zh-cn"&gt;以资源形式使用字体&lt;/a&gt;（这是在 &lt;a href="https://developer.android.com/about/versions/oreo?hl=zh-cn"&gt;Android 8.0（API 级别 26）&lt;/a&gt; 中推出的新功能）。&lt;/li&gt;
&lt;li&gt;支持集成了 &lt;a href="https://developer.android.com/topic/instant-apps/release-notes?hl=zh-cn#android_instant_apps_development_sdk_v110"&gt;Android 免安装应用 SDK 1.1&lt;/a&gt; 及更高版本的特定语言 APK。&lt;/li&gt;
&lt;li&gt;您现在可以更改外部原生构建项目的输出目录，如下所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;
android {
    ...
    externalNativeBuild {
        // For ndk-build, instead use the ndkBuild block.
        cmake {
            ...
            // Specifies a relative path for outputs from external native
            // builds. You can specify any path that's not a subdirectory
            // of your project's temporary build/ directory.
            buildStagingDirectory "./outputs/cmake"
        }
    }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;
android {
    ...
    externalNativeBuild {
        // For ndk-build, instead use the ndkBuild block.
        cmake {
            ...
            // Specifies a relative path for outputs from external native
            // builds. You can specify any path that's not a subdirectory
            // of your project's temporary build/ directory.
            buildStagingDirectory = "./outputs/cmake"
        }
    }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;现在，从 Android Studio 中构建原生项目时，您可以&lt;a href="https://developer.android.com/studio/projects/install-ndk?hl=zh-cn#vanilla_cmake"&gt;使用 CMake 3.7 或更高版本&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;您可以使用新的 &lt;code dir="ltr" translate="no"&gt;lintChecks&lt;/code&gt; 依赖项配置构建用于定义自定义 lint 规则的 JAR，并将其打包到您的 AAR 和 APK 项目中。您的自定义 lint 规则必须属于单独的项目，该项目输出单个 JAR 并且仅包含 &lt;a href="https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_plugin_and_dependency_management"&gt;&lt;code dir="ltr" translate="no"&gt;compileOnly&lt;/code&gt;&lt;/a&gt; 依赖项。然后，其他应用和库模块可以依赖于使用 &lt;code dir="ltr" translate="no"&gt;lintChecks&lt;/code&gt; 配置的 lint 项目：&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;
dependencies {
    // This tells the Gradle plugin to build ':lint-checks' into a lint.jar file
    // and package it with your module. If the module is an Android library,
    // other projects that depend on it automatically use the lint checks.
    // If the module is an app, lint includes these rules when analyzing the app.
    lintChecks project(':lint-checks')
}
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;
dependencies {
    // This tells the Gradle plugin to build ':lint-checks' into a lint.jar file
    // and package it with your module. If the module is an Android library,
    // other projects that depend on it automatically use the lint checks.
    // If the module is an app, lint includes these rules when analyzing the app.
    lintChecks(project(":lint-checks"))
}
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3 data-text="行为变更" id="behavior_changes"&gt;行为变更&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Android 插件 3.0.0 移除了某些 API。如果您使用这些 API，您的 build 将会出现异常。例如，您无法再使用 Variants API 访问 &lt;code dir="ltr" translate="no"&gt;outputFile()&lt;/code&gt; 对象，或使用 &lt;code dir="ltr" translate="no"&gt;processManifest.manifestOutputFile()&lt;/code&gt; 获取各个变体的清单文件。如需了解详情，请参阅 &lt;a href="https://developer.android.com/studio/known-issues?hl=zh-cn#variant_api"&gt;API 变更&lt;/a&gt;部分。&lt;/li&gt;
&lt;li&gt;您无需再指定 Build Tools 的版本（因此，您现在可以移除 &lt;code dir="ltr" translate="no"&gt;android.buildToolsVersion&lt;/code&gt; 属性了）。默认情况下，插件会针对所用 Android 插件的版本自动使用所需的最低版 Build Tools。&lt;/li&gt;
&lt;li&gt;现在，您可以在 &lt;code dir="ltr" translate="no"&gt;buildTypes&lt;/code&gt; 代码块中启用/停用 PNG 处理（如下所示）。默认情况下，会为所有 build 启用 PNG 处理；但调试 build 除外，因为它会增加包含许多 PNG 文件的项目的构建时间。因此，为了缩短其他 build 类型的构建时间，您应该停用 PNG 处理或&lt;a href="https://developer.android.com/studio/write/convert-webp?hl=zh-cn#convert_images_to_webp"&gt;将图片转换成 WebP 格式&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;
android {
  buildTypes {
    release {
      // Disables PNG crunching for the release build type.
      crunchPngs false
    }
  }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;
android {
  buildTypes {
    release {
      // Disables PNG crunching for the release build type.
      isCrunchPngs = false
    }
  }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Android 插件现在会自动构建您在外部 CMake 项目中配置的可执行目标。&lt;/li&gt;
&lt;li&gt;现在，您必须使用 &lt;code dir="ltr" translate="no"&gt;annotationProcessor&lt;/code&gt; 依赖项配置将&lt;a href="https://developer.android.com/studio/build/dependencies?hl=zh-cn#annotation_processor"&gt;注解处理器添加&lt;/a&gt;到处理器类路径中。&lt;/li&gt;
&lt;li&gt;现在，使用已废弃的 &lt;code dir="ltr" translate="no"&gt;ndkCompile&lt;/code&gt; 会受到更多限制。您应该改用 CMake 或 ndk-build 来编译要打包到 APK 中的原生代码。如需了解详情，请阅读&lt;a href="https://developer.android.com/studio/projects/add-native-code?hl=zh-cn#ndkCompile"&gt;从 ndkcompile 迁移&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
</description><author>Google</author><pubDate>2017-10-01 00:00:00</pubDate></item><item><title>2.3.0（2017 年 2 月）</title><link>https://developer.android.com/studio/releases/gradle-plugin?hl=zh-cn</link><description>
&lt;div class="android-updates-box"&gt;
&lt;p&gt;&lt;b&gt;2.3.3（2017 年 6 月）&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;本次要更新添加了与 &lt;a href="https://developer.android.com/studio/releases?hl=zh-cn#Revisions"&gt;Android Studio 2.3.3&lt;/a&gt; 的兼容性。
  &lt;/p&gt;
&lt;p&gt;&lt;b&gt;2.3.2（2017 年 5 月）&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;本次要更新添加了与 &lt;a href="https://developer.android.com/studio/releases?hl=zh-cn#Revisions"&gt;Android Studio 2.3.2&lt;/a&gt; 的兼容性。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;2.3.1（2017 年 4 月）&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;这是针对 Android 插件 2.3.0 的次要更新，修复了某些 Android 物理设备无法正确使用 &lt;a href="https://developer.android.com/studio/run?hl=zh-cn#instant-run"&gt;Instant Run&lt;/a&gt; 的问题（详见&lt;a href="https://code.google.com/p/android/issues/detail?id=235879&amp;amp;hl=zh-cn"&gt;问题 #235879&lt;/a&gt;）。&lt;/p&gt;
&lt;/div&gt;
&lt;dl&gt;
&lt;dt&gt;依赖项：&lt;/dt&gt;
&lt;dd&gt;
&lt;ul&gt;
&lt;li&gt;Gradle 3.3 或更高版本。&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.android.com/tools/revisions/build-tools?hl=zh-cn"&gt;Build Tools 25.0.0&lt;/a&gt; 或更高版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;新变化：&lt;/dt&gt;
&lt;dd&gt;
&lt;ul&gt;
&lt;li&gt;使用 Gradle 3.3，其中包括性能改进和新功能。如需了解详情，请参阅 &lt;a class="external-link" href="https://docs.gradle.org/3.3/release-notes"&gt;Gradle 版本说明&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;b&gt;构建缓存&lt;/b&gt;：存储构建项目时 Android 插件生成的特定输出（例如，未打包的 AAR 和经过 dex 预处理的远程依赖项）。使用缓存时，干净 build 的速度会显著加快，因为构建系统在进行后续构建时可以直接重用这些缓存的文件，而无需重新创建。使用 Android 插件 2.3.0 及更高版本的项目在默认情况下会使用构建缓存。如需了解详情，请参阅有关&lt;a href="https://developer.android.com/studio/build/build-cache?hl=zh-cn"&gt;使用构建缓存加快构建速度&lt;/a&gt;的文章。
        &lt;ul&gt;
&lt;li&gt;加入了&lt;a href="https://developer.android.com/studio/build/build-cache?hl=zh-cn#clear_the_build_cache"&gt;清除构建缓存&lt;/a&gt;的 &lt;code dir="ltr" translate="no"&gt;cleanBuildCache&lt;/code&gt; 任务。&lt;/li&gt;
&lt;li&gt;如果您使用的是构建缓存的实验性版本（包含在早期版本的插件中），则应将&lt;a href="#updating-plugin"&gt;插件更新&lt;/a&gt;到最新版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;变更：&lt;/dt&gt;
&lt;dd&gt;
&lt;ul&gt;
&lt;li&gt;支持对 &lt;a href="https://developer.android.com/studio/releases?hl=zh-cn"&gt;Android Studio 2.3&lt;/a&gt; 中包含的 Instant Run 进行更改。&lt;/li&gt;
&lt;li&gt;大型项目的配置速度应该会明显加快。&lt;/li&gt;
&lt;li&gt;修复了&lt;a href="https://developer.android.com/training/constraint-layout?hl=zh-cn"&gt;约束布局库&lt;/a&gt;自动下载的问题。&lt;/li&gt;
&lt;li&gt;插件现在使用 &lt;a class="external-link" href="https://www.guardsquare.com/en/proguard/manual/versions"&gt;ProGuard 版本 5.3.2&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;修复了多个&lt;a href="https://code.google.com/p/android/issues/list?can=1&amp;amp;q=Component%3DTools++Subcomponent%3DTools-gradle%2CTools-build%2CTools-instantrun%2CTools-cpp-build+Target%3D2.3+status%3AFutureRelease%2CReleased+&amp;amp;sort=priority+-status&amp;amp;colspec=ID+Status+Priority+Owner+Summary+Stars+Reporter+Opened&amp;amp;cells=tiles&amp;amp;hl=zh-cn"&gt;报告的错误&lt;/a&gt;。如果遇到问题，请继续&lt;a href="https://developer.android.com/studio/report-bugs?hl=zh-cn"&gt;提交 bug 报告&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
</description><author>Google</author><pubDate>2017-02-01 00:00:00</pubDate></item><item><title>2.2.0（2016 年 9 月）</title><link>https://developer.android.com/studio/releases/gradle-plugin?hl=zh-cn</link><description>
&lt;dl&gt;
&lt;dt&gt;依赖项：&lt;/dt&gt;
&lt;dd&gt;
&lt;ul&gt;
&lt;li&gt;Gradle 2.14.1 或更高版本。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.android.com/tools/revisions/build-tools?hl=zh-cn"&gt;Build Tools 23.0.2&lt;/a&gt; 或更高版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;新变化：&lt;/dt&gt;
&lt;dd&gt;
&lt;ul&gt;
&lt;li&gt;使用 Gradle 2.14.1，其中加入了一些性能改进和新功能，并修复了在使用 Gradle 守护程序时允许获取本地特权的安全漏洞。如需了解详情，请参阅 &lt;a class="external-link" href="https://docs.gradle.org/2.14.1/release-notes"&gt;Gradle 版本说明&lt;/a&gt;。
    &lt;/li&gt;
&lt;li&gt;利用 &lt;a href="https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.ExternalNativeBuild.html"&gt;&lt;code dir="ltr" translate="no"&gt;externalNativeBuild {}&lt;/code&gt;&lt;/a&gt; DSL，Gradle 现在可让您链接到自己的原生源代码，并使用 CMake 或 ndk-build 编译原生库。构建原生库后，Gradle 会将它们打包到您的 APK 中。如需详细了解如何在 Gradle 中使用 CMake 和 ndk-build，请阅读&lt;a href="https://developer.android.com/studio/projects/add-native-code?hl=zh-cn"&gt;向您的项目添加 C 和 C++ 代码&lt;/a&gt;一文。
  &lt;/li&gt;
&lt;li&gt;当您&lt;a href="https://developer.android.com/studio/build/building-cmdline?hl=zh-cn"&gt;从命令行运行 build&lt;/a&gt; 时，Gradle 现在会尝试自动下载项目依赖但缺失的 SDK 组件或更新。如需了解详情，请阅读 &lt;a href="https://developer.android.com/studio/intro/update?hl=zh-cn#download-with-gradle"&gt;Gradle 自动下载缺失软件包&lt;/a&gt;部分。
&lt;/li&gt;
&lt;li&gt;新的实验性缓存功能可让 Gradle 通过 dex 预处理、存储和重复使用库的 dex 预处理版本来缩短构建时间。如需详细了解如何使用此实验性功能，请阅读&lt;a href="https://developer.android.com/studio/build/build-cache?hl=zh-cn"&gt;构建缓存&lt;/a&gt;指南。
&lt;/li&gt;
&lt;li&gt;通过采用在一个任务中处理压缩、签名和&lt;a href="https://developer.android.com/studio/command-line/zipalign?hl=zh-cn"&gt;压缩对齐&lt;/a&gt;操作的新默认打包管道，提升了构建性能。您可以通过在 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中添加 &lt;code dir="ltr" translate="no"&gt;android.useOldPackaging=true&lt;/code&gt; 来恢复使用旧的打包工具。在使用新的打包工具时，&lt;code dir="ltr" translate="no"&gt;zipalignDebug&lt;/code&gt; 任务将不可用。不过，您可以调用 &lt;code dir="ltr" translate="no"&gt;createZipAlignTask(String taskName, File inputFile, File
  outputFile)&lt;/code&gt; 方法来自己创建一个。
&lt;/li&gt;
&lt;li&gt;除了传统的 JAR 签名，APK 签名现在还会使用 &lt;a href="https://developer.android.com/about/versions/nougat/android-7.0?hl=zh-cn#apk_signature_v2"&gt;APK 签名方案 v2&lt;/a&gt;。所有 Android 平台都接受生成的 APK。如果在签名后修改这些 APK，那么它们的 v2 签名便会失效，并会阻止在设备上安装。如需停用此功能，请将以下代码添加到模块级 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中：

&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;
android {
  ...
  signingConfigs {
    config {
      ...
      v2SigningEnabled false
    }
  }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;
android {
  ...
  signingConfigs {
    create("config") {
      ...
      v2SigningEnabled = false
    }
  }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;对于 MultiDex build，您现在可以使用 ProGuard 规则来确定 Gradle 应该将哪些类编译到应用的主 DEX 文件中。&lt;em&gt;&lt;/em&gt;因为 Android 系统在启动应用时会先加载主 DEX 文件，所以您可以在启动时通过将它们编译到主 DEX 文件中来确定某些类的优先级。在您专门为主 DEX 文件创建 ProGuard 配置文件后，请使用 &lt;code dir="ltr" translate="no"&gt;&lt;a href="https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.BuildType.html#com.android.build.gradle.internal.dsl.BuildType:multiDexKeepProguard"&gt;
buildTypes.multiDexKeepProguard&lt;/a&gt;&lt;/code&gt; 将该配置文件的路径传递给 Gradle。使用此 DSL 与使用 &lt;a href="https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.BuildType.html#com.android.build.gradle.internal.dsl.BuildType:proguardFiles(java.lang.Object[])"&gt;&lt;code dir="ltr" translate="no"&gt;buildTypes.proguardFiles&lt;/code&gt;&lt;/a&gt; 不同，后者会提供应用的常规 ProGuard 规则，并且不会指定主 DEX 文件的类。
&lt;/li&gt;
&lt;li&gt;添加了对 &lt;code dir="ltr" translate="no"&gt;android:extractNativeLibs&lt;/code&gt; 标记的支持，该标记可在应用安装到设备的过程中缩小应用的大小。如果您在应用清单的 &lt;a href="https://developer.android.com/guide/topics/manifest/application-element?hl=zh-cn"&gt;&lt;code dir="ltr" translate="no"&gt;&amp;lt;application&amp;gt;&lt;/code&gt;&lt;/a&gt; 元素中将此标志设置为 &lt;code dir="ltr" translate="no"&gt;false&lt;/code&gt;，Gradle 会将未压缩的对齐版原生库和 APK 打包在一起。这可防止 &lt;a href="https://developer.android.com/reference/android/content/pm/PackageManager?hl=zh-cn"&gt;&lt;code dir="ltr" translate="no"&gt;PackageManager&lt;/code&gt;&lt;/a&gt; 在安装过程中将原生库从 APK 复制到设备的文件系统，同时还有助于减小应用增量更新。
&lt;/li&gt;
&lt;li&gt;您现在可以针对产品变种指定 &lt;a href="https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.ProductFlavor.html#com.android.build.gradle.internal.dsl.ProductFlavor:versionNameSuffix"&gt;&lt;code dir="ltr" translate="no"&gt;versionNameSuffix&lt;/code&gt;&lt;/a&gt; 和 &lt;a href="https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.ProductFlavor.html#com.android.build.gradle.internal.dsl.ProductFlavor:applicationIdSuffix"&gt;&lt;code dir="ltr" translate="no"&gt;applicationIdSuffix&lt;/code&gt;&lt;/a&gt;。（&lt;a href="http://b.android.com/59614?hl=zh-cn"&gt;问题 59614&lt;/a&gt;）
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;
变更：
&lt;/dt&gt;
&lt;dd&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code dir="ltr" translate="no"&gt;getDefaultProguardFile&lt;/code&gt; 现在会返回 Android Plugin for Gradle 提供的默认 ProGuard 文件，并且不再使用 Android SDK 中的那些文件。
&lt;/li&gt;
&lt;li&gt;改进了 Jack 编译器的性能和功能：
&lt;ul&gt;
&lt;li&gt;在将 &lt;code dir="ltr" translate="no"&gt;&lt;a href="https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.BuildType.html#com.android.build.gradle.internal.dsl.BuildType:testCoverageEnabled"&gt;
testCoverageEnabled&lt;/a&gt;&lt;/code&gt; 设置为 &lt;code dir="ltr" translate="no"&gt;true&lt;/code&gt; 后，Jack 现在支持 Jacoco 测试覆盖率。
&lt;/li&gt;
&lt;li&gt;改进了对注解处理器的支持。类路径上的注解处理器（例如任意 &lt;code dir="ltr" translate="no"&gt;compile&lt;/code&gt; 依赖项）会自动应用于您的 build。您还可以在 build 中指定注解处理器，并通过在模块级 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中使用 &lt;a href="https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.AnnotationProcessorOptions.html"&gt;&lt;code dir="ltr" translate="no"&gt;javaCompileOptions.annotationProcessorOptions {}&lt;/code&gt;&lt;/a&gt; DSL 来传递参数：

&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;
android {
  ...
  defaultConfig {
    ...
    javaCompileOptions {
      annotationProcessorOptions {
        className 'com.example.MyProcessor'
        // Arguments are optional.
        arguments = [ foo : 'bar' ]
      }
    }
  }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;
android {
  ...
  defaultConfig {
    ...
    javaCompileOptions {
      annotationProcessorOptions {
        className = "com.example.MyProcessor"
        // Arguments are optional.
        arguments(mapOf(foo to "bar"))
      }
    }
  }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
如果要在编译时应用注解处理器，但不将其包含在 APK 中，请使用 &lt;code dir="ltr" translate="no"&gt;annotationProcessor&lt;/code&gt; 依赖项范围：
&lt;/p&gt;
&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;
dependencies {
    compile 'com.google.dagger:dagger:2.0'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.0'
   // or use buildVariantAnnotationProcessor to target a specific build variant
}
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;
dependencies {
    implementation("com.google.dagger:dagger:2.0")
    annotationProcessor("com.google.dagger:dagger-compiler:2.0")
   // or use buildVariantAnnotationProcessor to target a specific build variant
}
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;p&gt;
如需查看您可以设置的参数的列表，请从命令行中运行以下命令：
&lt;/p&gt;
&lt;pre class="none devsite-terminal" dir="ltr" translate="no"&gt;
java -jar /build-tools/jack.jar --help-properties
&lt;/pre&gt;
&lt;li&gt;默认情况下，如果 Gradle 守护程序的堆大小至少为 1.5 GB，那么 Jack 现在会与 Gradle 在同一进程中运行。如需调整守护进程的堆大小，请将以下代码添加到 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中：

&lt;pre class="none" dir="ltr" translate="no"&gt;
# This sets the daemon heap size to 1.5GB.
org.gradle.jvmargs=-Xmx1536M
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
</description><author>Google</author><pubDate>2016-09-01 00:00:00</pubDate></item><item><title>2.1.0（2016 年 4 月）</title><link>https://developer.android.com/studio/releases/gradle-plugin?hl=zh-cn</link><description>
&lt;div class="android-updates-box"&gt;
&lt;p&gt;
&lt;b&gt;2.1.3（2016 年 8 月）&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;此更新需要使用 Gradle 2.14.1 及更高版本。Gradle 2.14.1 加入了一些性能改进、新功能和一个重要的&lt;a class="external-link" href="https://docs.gradle.org/2.14/release-notes#local-privilege-escalation-when-using-the-daemon"&gt;安全修复程序&lt;/a&gt;。如需了解详情，请参阅 &lt;a class="external-link" href="https://docs.gradle.org/2.14.1/release-notes"&gt;Gradle 版本说明&lt;/a&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;dl&gt;
&lt;dt&gt;依赖项：&lt;/dt&gt;
&lt;dd&gt;
&lt;ul&gt;
&lt;li&gt;Gradle 2.10 或更高版本。
      &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.android.com/tools/revisions/build-tools?hl=zh-cn"&gt;Build Tools 23.0.2&lt;/a&gt; 或更高版本。
      &lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;新变化：&lt;/dt&gt;
&lt;dd&gt;
&lt;ul&gt;
&lt;li&gt;添加了对 N 开发者预览版、JDK 8 以及使用 Jack 工具链的 &lt;a href="https://developer.android.com/preview/j8-jack?hl=zh-cn"&gt;Java 8 语言功能&lt;/a&gt;的支持。如需了解详情，请阅读 &lt;a href="https://developer.android.com/about/versions/nougat?hl=zh-cn"&gt;N 预览版指南&lt;/a&gt;。

        &lt;p class="note"&gt;
&lt;strong&gt;注意&lt;/strong&gt;：&lt;a href="https://developer.android.com/tools/building/building-studio?hl=zh-cn#instant-run"&gt;Instant Run&lt;/a&gt; 目前无法用于 Jack，在使用新的工具链时将被停用。如果您正在为 N 预览版开发应用，并希望使用受支持的 Java 8 语言功能，只需使用 Jack 即可。
        &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;添加了对增量 Java 编译的默认支持，以在开发过程中缩短编译时间。这种编译方式仅对已发生变化或需要重新编译的那部分源代码进行重新编译。如需停用此功能，请将以下代码添加到模块级 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中：

        &lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;
android {
  ...
  compileOptions {
    incremental false
  }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;
android {
  ...
  compileOptions {
    incremental = false
  }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
        添加了对 dexing-in-process 的支持。dexing-in-process 会在构建流程（而不是单独的外部虚拟机流程）中执行 dex 处理。这样不仅可以让增量构建更快，还可以加快完整构建的速度。对于已将 Gradle 守护程序的最大堆大小设置为不小于 2048MB 的项目，该功能默认处于启用状态。如需进行设置，您可以将以下代码添加到项目的 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中：&lt;/p&gt;

```none
org.gradle.jvmargs = -Xmx2048m
```
        &lt;p&gt;
        如果您已经在模块级 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中为 &lt;a class="external-link" href="https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.DexOptions.html#com.android.build.gradle.internal.dsl.DexOptions:javaMaxHeapSize"&gt;&lt;code dir="ltr" translate="no"&gt;javaMaxHeapSize&lt;/code&gt;&lt;/a&gt; 定义值，则需要将 &lt;code dir="ltr" translate="no"&gt;org.gradle.jvmargs&lt;/code&gt; 的值设置为“&lt;code dir="ltr" translate="no"&gt;javaMaxHeapSize&lt;/code&gt; + 1024MB”的结果。例如，如果您将 &lt;code dir="ltr" translate="no"&gt;javaMaxHeapSize&lt;/code&gt; 设置为“2048m”，则需要将以下代码添加到项目的 &lt;code dir="ltr" translate="no"&gt;gradle.properties&lt;/code&gt; 文件中：&lt;/p&gt;

```none
org.gradle.jvmargs = -Xmx3072m
```

        &lt;p&gt;
          如需停用 dexing-in-process，请将以下代码添加到模块级 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中：&lt;/p&gt;
&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;
android {
  ...
  dexOptions {
      dexInProcess false
  }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;
android {
  ...
  dexOptions {
      dexInProcess = false
  }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
</description><author>Google</author><pubDate>2016-04-01 00:00:00</pubDate></item><item><title>2.0.0（2016 年 4 月）</title><link>https://developer.android.com/studio/releases/gradle-plugin?hl=zh-cn</link><description>
&lt;dl&gt;
&lt;dt&gt;依赖项：&lt;/dt&gt;
&lt;dd&gt;
&lt;ul&gt;
&lt;li&gt;Gradle 2.10 或更高版本。
      &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.android.com/tools/revisions/build-tools?hl=zh-cn"&gt;Build Tools 21.1.1&lt;/a&gt; 或更高版本。
      &lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;新变化：&lt;/dt&gt;
&lt;dd&gt;
&lt;ul&gt;
&lt;li&gt;通过支持字节码注入，然后将代码和资源更新推送到模拟器或物理设备上正在运行的应用，来启用 &lt;a href="https://developer.android.com/tools/building/building-studio?hl=zh-cn#instant-run"&gt;Instant Run&lt;/a&gt;。
      &lt;/li&gt;
&lt;li&gt;添加了对增量构建的支持，即使应用未运行也支持。
      通过 &lt;a href="https://developer.android.com/tools/help/adb?hl=zh-cn"&gt;Android 调试桥&lt;/a&gt;将增量更改推送到已连接的设备，缩短了完整构建的时间。
      &lt;/li&gt;
&lt;li&gt;添加了 &lt;a class="external-link" href="https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.DexOptions.html#com.android.build.gradle.internal.dsl.DexOptions:maxProcessCount"&gt;&lt;code dir="ltr" translate="no"&gt;maxProcessCount&lt;/code&gt;&lt;/a&gt;，以控制可以同时衍生多少个工作器 dex 处理进程。以下代码在模块级 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中将最大并发进程数设置为 4：

&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;
android {
  ...
  dexOptions {
    maxProcessCount = 4 // this is the default value
  }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;
android {
  ...
  dexOptions {
    maxProcessCount = 4 // this is the default value
  }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;添加了实验性代码缩减器，以支持 dex 预处理和减少对依赖项的重复 dex 处理，而这些不受 Proguard 支持。这提高了调试 build 变体的构建速度。由于实验性缩减器不支持优化和混淆处理功能，因此您应该为发布 build 启用 Proguard。如需为调试 build 启用实验性缩减器，请将以下代码添加到模块级 &lt;code dir="ltr" translate="no"&gt;build.gradle&lt;/code&gt; 文件中：

&lt;div&gt;
&lt;div class="ds-selector-tabs"&gt;&lt;section&gt;&lt;h3 data-text="Groovy" id="groovy"&gt;Groovy&lt;/h3&gt;
&lt;pre class="prettyprint lang-groovy" dir="ltr" translate="no"&gt;
android {
  ...
  buildTypes {
    debug {
      minifyEnabled true
      useProguard false
    }
    release {
      minifyEnabled true
      useProguard true // this is a default setting
    }
  }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;section&gt;&lt;h3 data-text="Kotlin" id="kts"&gt;Kotlin&lt;/h3&gt;
&lt;pre class="prettyprint lang-kotlin" dir="ltr" translate="no"&gt;
android {
  ...
  buildTypes {
    getByName("debug") {
      minifyEnabled = true
      useProguard = false
    }
    getByName("release") {
      minifyEnabled = true
      useProguard = true // this is a default setting
    }
  }
}
&lt;/pre&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;为资源缩减器添加了日志记录支持并提升了性能。资源压缩器现在会将其所有操作记录到与 Proguard 日志文件位于同一文件夹的 &lt;code dir="ltr" translate="no"&gt;resources.txt&lt;/code&gt; 文件中。
      &lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;改变的行为：&lt;/dt&gt;
&lt;dd&gt;
&lt;ul&gt;
&lt;li&gt;如果将 &lt;code dir="ltr" translate="no"&gt;minSdkVersion&lt;/code&gt; 设置为 18 或更高，APK 签名会使用 SHA256。&lt;/li&gt;
&lt;li&gt;DSA 和 ECDSA 密钥现在可对 APK 软件包进行签名。

        &lt;p class="note"&gt;
&lt;strong&gt;注意&lt;/strong&gt;：从 Android 6.0（API 级别 23）开始，&lt;a href="https://developer.android.com/training/articles/keystore?hl=zh-cn"&gt;Android Keystore&lt;/a&gt; 提供程序不再支持 &lt;a href="https://developer.android.com/about/versions/marshmallow/android-6.0-changes?hl=zh-cn#behavior-keystore"&gt;DSA 密钥&lt;/a&gt;。
        &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;修复的问题：&lt;/dt&gt;
&lt;dd&gt;
&lt;ul&gt;
&lt;li&gt;修复了导致在测试和主 build 配置中出现重复 AAR 依赖项的问题。
      &lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
</description><author>Google</author><pubDate>2016-04-01 00:00:00</pubDate></item></channel></rss>